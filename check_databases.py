#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import os
from typing import Dict, Any

import asyncpg
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def check_database(db_config: Dict[str, Any], db_name: str) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\n{'='*50}")
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_name}")
    print(f"{'='*50}")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        conn = await asyncpg.connect(
            host=db_config["host"],
            port=db_config["port"],
            user=db_config["user"],
            password=db_config["password"],
            database=db_config["database"]
        )
        
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        print(f"üìç –•–æ—Å—Ç: {db_config['host']}:{db_config['port']}")
        print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_config['database']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ PostgreSQL
        version = await conn.fetchval("SELECT version()")
        print(f"üîß –í–µ—Ä—Å–∏—è PostgreSQL: {version.split(',')[0]}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        tables_query = """
            SELECT tablename 
            FROM pg_tables 
            WHERE schemaname = 'public'
            ORDER BY tablename;
        """
        tables = await conn.fetch(tables_query)
        
        print(f"\nüìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        if tables:
            for table in tables:
                table_name = table['tablename']
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
                count = await conn.fetchval(f"SELECT COUNT(*) FROM {table_name}")
                print(f"   üìä {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
                
                # –î–ª—è —Ç–∞–±–ª–∏—Ü—ã users –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                if table_name == 'users':
                    print(f"      ‚îî‚îÄ‚îÄ –°—Ç—Ä—É–∫—Ç—É—Ä–∞:")
                    columns = await conn.fetch("""
                        SELECT column_name, data_type, is_nullable
                        FROM information_schema.columns 
                        WHERE table_name = 'users' AND table_schema = 'public'
                        ORDER BY ordinal_position;
                    """)
                    for col in columns:
                        nullable = "NULL" if col['is_nullable'] == 'YES' else "NOT NULL"
                        print(f"          ‚Ä¢ {col['column_name']}: {col['data_type']} {nullable}")
                
                # –î–ª—è —Ç–∞–±–ª–∏—Ü—ã applications –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                elif table_name == 'applications':
                    print(f"      ‚îî‚îÄ‚îÄ –°—Ç—Ä—É–∫—Ç—É—Ä–∞:")
                    columns = await conn.fetch("""
                        SELECT column_name, data_type, is_nullable
                        FROM information_schema.columns 
                        WHERE table_name = 'applications' AND table_schema = 'public'
                        ORDER BY ordinal_position;
                    """)
                    for col in columns:
                        nullable = "NULL" if col['is_nullable'] == 'YES' else "NOT NULL"
                        print(f"          ‚Ä¢ {col['column_name']}: {col['data_type']} {nullable}")
        else:
            print("   ‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        await conn.close()
        return {"status": "success", "tables": [t['tablename'] for t in tables]}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return {"status": "error", "error": str(e)}


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –ö–ë–ö")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_db_config = {
        "host": os.getenv("DB_HOST"),
        "port": int(os.getenv("DB_PORT")),
        "user": os.getenv("DB_USER"),
        "password": os.getenv("DB_PASS"),
        "database": os.getenv("DB_NAME")
    }
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±–∞–∑—ã –∑–∞—è–≤–æ–∫
    applications_db_config = {
        "host": os.getenv("DB_APPLICATIONS_HOST"),
        "port": int(os.getenv("DB_APPLICATIONS_PORT")),
        "user": os.getenv("DB_APPLICATIONS_USER"),
        "password": os.getenv("DB_APPLICATIONS_PASS"),
        "database": os.getenv("DB_APPLICATIONS_NAME")
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    users_result = await check_database(users_db_config, "–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    apps_result = await check_database(applications_db_config, "–ë–∞–∑–∞ –∑–∞—è–≤–æ–∫")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*50}")
    print("üìù –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*50}")
    
    print(f"üóÇÔ∏è  –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ—Ä—Ç {users_db_config['port']}):")
    if users_result["status"] == "success":
        print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        print(f"   üìä –¢–∞–±–ª–∏—Ü—ã: {', '.join(users_result['tables'])}")
        if 'users' in users_result['tables']:
            print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ users: –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"   ‚ùå –¢–∞–±–ª–∏—Ü–∞ users: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        print(f"   ‚ùå –°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print(f"   üìù –û—à–∏–±–∫–∞: {users_result['error']}")
    
    print(f"\nüóÇÔ∏è  –ë–∞–∑–∞ –∑–∞—è–≤–æ–∫ (–ø–æ—Ä—Ç {applications_db_config['port']}):")
    if apps_result["status"] == "success":
        print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        print(f"   üìä –¢–∞–±–ª–∏—Ü—ã: {', '.join(apps_result['tables'])}")
        if 'applications' in apps_result['tables']:
            print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ applications: –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"   ‚ùå –¢–∞–±–ª–∏—Ü–∞ applications: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        print(f"   ‚ùå –°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print(f"   üìù –û—à–∏–±–∫–∞: {apps_result['error']}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò –ù–ê–°–¢–†–û–ô–ö–ò:")
    
    both_success = (users_result["status"] == "success" and 
                   apps_result["status"] == "success")
    
    if both_success:
        users_tables = set(users_result["tables"])
        apps_tables = set(apps_result["tables"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        correct_users = 'users' in users_tables and 'applications' not in users_tables
        correct_apps = 'applications' in apps_tables and 'users' not in apps_tables
        
        if correct_users and correct_apps:
            print("   ‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ö–û–†–†–ï–ö–¢–ù–û")
            print("   ‚úÖ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—É users")
            print("   ‚úÖ –ë–∞–∑–∞ –∑–∞—è–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—É applications")
        else:
            print("   ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏:")
            if not correct_users:
                print("   ‚ùå –í –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã")
            if not correct_apps:
                print("   ‚ùå –í –±–∞–∑–µ –∑–∞—è–≤–æ–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã")
    else:
        print("   ‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")


if __name__ == "__main__":
    asyncio.run(main())
