#!/usr/bin/env python3
"""
–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏—Ö —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ, –∫—É–¥–∞ –æ–Ω–∏ –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã.
–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ –æ—Ç–¥–µ–ª–∞–º/–ø–æ–∑–∏—Ü–∏—è–º –∑–∞—è–≤–∫–∏.
"""
import asyncio
import logging
import argparse
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from config.config import load_config
from app.infrastructure.database.connect_to_pg import get_pg_pool

# ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
TEST_USER_ID = 257026813

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–∫—Å—Ç—ã
CATEGORY_TEXTS = [
    ("smm_show", "<b>–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è —Ç–≤–æ—Ä–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏ </b>‚ö°Ô∏è\n\n‰Ω†Â•Ω! –°–µ–≥–æ–¥–Ω—è –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å –ø—Ä–∏–µ–º–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ú–µ—á—Ç–∞–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é? –ú—ã (–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—Ä—É–ø–Ω–æ–≥–æ –±–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏ üëÄ) –ø–æ–º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã —Ç–≤–æ–∏–º —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º –≤–æ—Å—Ö–∏—â–∞–ª–∞—Å—å —Ä–µ–±—è—Ç–∞ –∏–∑ 80+ —Ä–µ–≥–∏–æ–Ω–æ–≤ –†–æ—Å—Å–∏–∏!\n\n–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π –∏ –∑–∞–≥—Ä—É–∂–∞–π —Ä–µ—à–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –¥–æ <u><b>23:59</b></u> ‚è∞\n\n–ú—ã —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—ë–º —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É!"),
    ("smm_chinese", "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ</b> ‚ö°Ô∏è\n\n‰Ω†Â•Ω! –°–µ–≥–æ–¥–Ω—è –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å –ø—Ä–∏–µ–º–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –ø–æ –º–∞–∫—Å–∏–º—É–º—É –∏ –ø–æ–∫–∞–∂–∏, –∫–∞–∫ —Ç—ã —É–º–µ–µ—à—å —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. \n\n–ú—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–æ–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É ‚Äì –º—ã —Å–æ–∑–¥–∞–µ–º —Å—Ä–µ–¥—É, –≥–¥–µ —Ü–µ–Ω—è—Ç –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã –ü–æ–¥–Ω–µ–±–µ—Å–Ω–æ–π. –î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —Ç–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –æ –ö–∏—Ç–∞–µ, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≥—Ä–µ–º–∏—Ç –Ω–∞ –≤—Å—é –†–æ—Å—Å–∏—é?\n\nÊäìÁ¥ßÂï¶ÔºÅ‰ªäÊôö<b>23:59</b>Êà™Ê≠¢Êèê‰∫§ÔºÅ‚è∞\n\nÂçÉÈáå‰πãË°åÂßã‰∫éË∂≥‰∏ã!"),
    ("creative", "<b>–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è —Ç–≤–æ—Ä–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏ </b>‚ö°Ô∏è\n\n‰Ω†Â•Ω! –°–µ–≥–æ–¥–Ω—è –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å –ø—Ä–∏–µ–º–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —ç—Ç–∞–ø –æ—Ç–±–æ—Ä–∞, —ç—Ç–æ —Ç–≤–æ–π —à–∞–Ω—Å –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å. –î–æ–∫–∞–∂–∏, —á—Ç–æ —Ç–≤–æ–∏ –∏–¥–µ–∏ –º–æ–≥—É—Ç —É–¥–∏–≤–ª—è—Ç—å –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å. –ê –º—ã –ø–æ–º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã —Ç–≤–æ–∏–º —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º –≤–æ—Å—Ö–∏—â–∞–ª–∞—Å—å —Ä–µ–±—è—Ç–∞ –∏–∑ 80+ —Ä–µ–≥–∏–æ–Ω–æ–≤ –†–æ—Å—Å–∏–∏!\n\n–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π –∏ –∑–∞–≥—Ä—É–∂–∞–π —Ä–µ—à–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –¥–æ <u><b>23:59</b></u> ‚è∞\n\n–ú—ã —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—ë–º —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É!"),
    ("general", "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ</b> ‚ö°Ô∏è\n\n‰Ω†Â•Ω! –°–µ–≥–æ–¥–Ω—è –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å –ø—Ä–∏–µ–º–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –ø–æ –º–∞–∫—Å–∏–º—É–º—É –∏ –ø–æ–∫–∞–∂–∏, –∫–∞–∫ —Ç—ã —É–º–µ–µ—à—å —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. \n\n–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π –∏ –∑–∞–≥—Ä—É–∂–∞–π —Ä–µ—à–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –¥–æ <u><b>23:59</b></u> ‚è∞\n\n<i>–ú—ã —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—ë–º —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É!</i>")
]

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–æ—Ç–¥–µ–ª/–ø–æ–¥–æ—Ç–¥–µ–ª)
# –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –∞ –Ω–µ ID
SMM_SHOW_DEPTS = {"–ú–µ–¥–∏–∞-—à–æ—É"}  # SMM&PR, –º–µ–¥–∏–∞-—à–æ—É (–ø–æ–¥–æ—Ç–¥–µ–ª)
SMM_CHINESE_POSITIONS = {"–ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ –∑–Ω–∞–Ω–∏–µ–º –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"}  # SMM&PR, –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä —Å –∫–∏—Ç–∞–π—Å–∫–∏–º (–ø–æ–∑–∏—Ü–∏—è)
CREATIVE_DEPTS = {"–û—Ç–¥–µ–ª –¥–∏–∑–∞–π–Ω–∞", "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª"}  # –î–∏–∑–∞–π–Ω –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª


def get_category(dept_pos_list):
    """
    dept_pos_list: list of (department, subdepartment, position) for all –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞-—à–æ—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1) - –ø–æ –ø–æ–¥–æ—Ç–¥–µ–ª—É
    for dept, subdept, pos in dept_pos_list:
        if subdept in SMM_SHOW_DEPTS:
            return "smm_show"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä —Å –∫–∏—Ç–∞–π—Å–∫–∏–º (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2) - –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    for dept, subdept, pos in dept_pos_list:
        if pos in SMM_CHINESE_POSITIONS:
            return "smm_chinese"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –æ—Ç–¥–µ–ª—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3) - –ø–æ –æ—Ç–¥–µ–ª—É
    for dept, subdept, pos in dept_pos_list:
        if dept in CREATIVE_DEPTS:
            return "creative"
    
    return "general"


async def get_user_category_and_message(pool, user_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (category_name, message_text) –∏–ª–∏ None –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏
    """
    async with pool.connection() as conn:
        cursor = await conn.execute("""
            SELECT u.user_id,
                   ea.accepted_1, ea.accepted_2, ea.accepted_3,
                   u.task_1_submitted, u.task_2_submitted, u.task_3_submitted,
                   a.department_1, a.subdepartment_1, a.position_1,
                   a.department_2, a.subdepartment_2, a.position_2,
                   a.department_3, a.subdepartment_3, a.position_3
            FROM users u
            INNER JOIN evaluated_applications ea ON u.user_id = ea.user_id
            LEFT JOIN applications a ON u.user_id = a.user_id
            WHERE u.user_id = %s AND u.is_blocked = FALSE
        """, (user_id,))
        
        row = await cursor.fetchone()
        if not row:
            return None
            
        accepted = row[1:4]
        submitted = row[4:7]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ, –∫—É–¥–∞ –ø—Ä–∏–Ω—è—Ç, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª
        has_unsubmitted = any(acc and not sub for acc, sub in zip(accepted, submitted))
        if not has_unsubmitted:
            return None
            
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        dept_pos = [
            (row[7], row[8], row[9]),
            (row[10], row[11], row[12]),
            (row[13], row[14], row[15])
        ]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        cat = get_category(dept_pos)
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        for key, text in CATEGORY_TEXTS:
            if cat == key:
                return (cat, text, dept_pos)  # –î–æ–±–∞–≤–ª—è–µ–º dept_pos –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        return None


async def test_single_user(user_id=TEST_USER_ID, dry_run=True):
    """
    –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    logging.basicConfig(level=logging.INFO)
    config = load_config()
    bot = Bot(token=config.tg_bot.token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    
    pool = await get_pg_pool(
        db_name=config.db_applications.database,
        host=config.db_applications.host,
        port=config.db_applications.port,
        user=config.db_applications.user,
        password=config.db_applications.password
    )
    
    try:
        result = await get_user_category_and_message(pool, user_id)
        
        if result is None:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
            print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("- –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ evaluated_applications")
            print("- –û—Ç–ø—Ä–∞–≤–∏–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è, –∫—É–¥–∞ –±—ã–ª –ø—Ä–∏–Ω—è—Ç")
            return
        
        category, message, dept_pos = result
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏")
        print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        print(f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        for i, (dept, subdept, pos) in enumerate(dept_pos, 1):
            print(f"  {i}. –û—Ç–¥–µ–ª: {dept}, –ü–æ–¥–æ—Ç–¥–µ–ª: {subdept}, –ü–æ–∑–∏—Ü–∏—è: {pos}")
        print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:")
        print("-" * 50)
        print(message)
        print("-" * 50)
        
        if dry_run:
            print("\nüîç DRY RUN: –°–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return
            
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        confirm = input(f"\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}? (y/N): ").strip().lower()
        if confirm != 'y':
            print("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
            
        try:
            await bot.send_message(chat_id=user_id, text=message)
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        raise
    finally:
        await bot.session.close()


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    logging.basicConfig(level=logging.INFO)
    config = load_config()
    bot = Bot(token=config.tg_bot.token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    pool = await get_pg_pool(
        db_name=config.db_applications.database,
        host=config.db_applications.host,
        port=config.db_applications.port,
        user=config.db_applications.user,
        password=config.db_applications.password
    )
    async with pool.connection() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ, –∫—É–¥–∞ –æ–Ω–∏ –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
        cursor = await conn.execute("""
            SELECT u.user_id,
                   ea.accepted_1, ea.accepted_2, ea.accepted_3,
                   u.task_1_submitted, u.task_2_submitted, u.task_3_submitted,
                   a.department_1, a.subdepartment_1, a.position_1,
                   a.department_2, a.subdepartment_2, a.position_2,
                   a.department_3, a.subdepartment_3, a.position_3
            FROM users u
            INNER JOIN evaluated_applications ea ON u.user_id = ea.user_id
            LEFT JOIN applications a ON u.user_id = a.user_id
            WHERE u.is_blocked = FALSE
        """)
        rows = await cursor.fetchall()
    
    # user_id -> (–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ç–µ–∫—Å—Ç)
    user_msgs = {}
    for row in rows:
        user_id = row[0]
        accepted = row[1:4]
        submitted = row[4:7]
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        dept_pos = [
            (row[7], row[8], row[9]),
            (row[10], row[11], row[12]),
            (row[13], row[14], row[15])
        ]
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ, –∫—É–¥–∞ –ø—Ä–∏–Ω—è—Ç, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª
        has_unsubmitted = any(acc and not sub for acc, sub in zip(accepted, submitted))
        if not has_unsubmitted:
            continue
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        cat = get_category(dept_pos)
        for key, text in CATEGORY_TEXTS:
            if cat == key:
                user_msgs[user_id] = text
                break
    print(f"–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(user_msgs)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    for i, (uid, msg) in enumerate(list(user_msgs.items())[:5]):
        print(f"\n--- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} ---\n{msg[:200]}...")
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    ans = input("\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É? (y/N): ").strip().lower()
    if ans != 'y':
        print("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    sent, errors = 0, 0
    for uid, msg in user_msgs.items():
        try:
            await bot.send_message(chat_id=uid, text=msg)
            sent += 1
            await asyncio.sleep(0.05)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {uid}: {e}")
            errors += 1
    print(f"–ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}, –æ—à–∏–±–æ–∫: {errors}")
    await bot.session.close()


def main_cli():
    """
    CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    """
    parser = argparse.ArgumentParser(
        description="–°–∫—Ä–∏–ø—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    test_parser = subparsers.add_parser('test', help='–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    test_parser.add_argument(
        '--user-id',
        type=int,
        default=TEST_USER_ID,
        help=f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {TEST_USER_ID})'
    )
    test_parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏'
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    send_parser = subparsers.add_parser('send', help='–ü–æ–ª–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
    
    args = parser.parse_args()
    
    if args.command == 'test':
        asyncio.run(test_single_user(
            user_id=args.user_id,
            dry_run=args.dry_run
        ))
    elif args.command == 'send':
        asyncio.run(main())
    else:
        parser.print_help()


if __name__ == "__main__":
    main_cli()
