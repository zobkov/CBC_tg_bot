#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –º–∞–ø–ø–∏–Ω–≥–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ.
"""

import os
import sys
import json
import hashlib
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def get_file_hash(filepath):
    """–ü–æ–ª—É—á–∞–µ—Ç MD5 —Ö—ç—à —Ñ–∞–π–ª–∞"""
    try:
        with open(filepath, 'rb') as f:
            return hashlib.md5(f.read()).hexdigest()
    except Exception as e:
        return f"ERROR: {e}"

def get_file_info(filepath):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
    try:
        stat = os.stat(filepath)
        return {
            "exists": True,
            "size": stat.st_size,
            "modified": datetime.fromtimestamp(stat.st_mtime).isoformat(),
            "hash": get_file_hash(filepath)
        }
    except Exception as e:
        return {
            "exists": False,
            "error": str(e)
        }

def check_config_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
    
    config_files = [
        "config/task_file_ids.json",
        "config/position-file_map.json", 
        "config/position_id_mapping.json",
        "config/departments.json",
        "config/selection_config.json"
    ]
    
    for config_file in config_files:
        info = get_file_info(config_file)
        if info["exists"]:
            print(f"  ‚úÖ {config_file}")
            print(f"     –†–∞–∑–º–µ—Ä: {info['size']} –±–∞–π—Ç")
            print(f"     –ò–∑–º–µ–Ω–µ–Ω: {info['modified']}")
            print(f"     MD5: {info['hash']}")
        else:
            print(f"  ‚ùå {config_file}: {info['error']}")

def check_mappings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–∞–ø–ø–∏–Ω–≥–æ–≤"""
    print("\nüóÇÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ø–ø–∏–Ω–≥–æ–≤:")
    
    try:
        from app.utils.task_file_id import load_task_file_ids
        task_file_ids = load_task_file_ids()
        print(f"  ‚úÖ task_file_ids.json: {len(task_file_ids)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        print(f"  ‚ùå task_file_ids.json: {e}")
    
    try:
        from app.utils.position_mapping import load_position_id_mapping
        position_mapping = load_position_id_mapping()
        print(f"  ‚úÖ position_id_mapping.json: –∑–∞–≥—Ä—É–∂–µ–Ω")
        print(f"     –û—Ç–¥–µ–ª—ã: {len(position_mapping.get('departments_map', {}))}")
        print(f"     –ü–æ–¥–æ—Ç–¥–µ–ª—ã: {len(position_mapping.get('subdepartments_map', {}))}")
        print(f"     –ü–æ–∑–∏—Ü–∏–∏: {len(position_mapping.get('positions_map', {}))}")
    except Exception as e:
        print(f"  ‚ùå position_id_mapping.json: {e}")
    
    try:
        from app.utils.position_mapping import load_position_file_mapping
        file_mapping = load_position_file_mapping()
        print(f"  ‚úÖ position-file_map.json: {len(file_mapping)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        print(f"  ‚ùå position-file_map.json: {e}")

def test_problematic_position():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ –ª–æ–≥–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏:")
    
    try:
        from app.utils.position_mapping import get_position_id, get_task_file_for_position
        from app.utils.task_file_id import get_task_file_id
        
        # –ü—Ä–æ–±–ª–µ–º–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–∑ –ª–æ–≥–∞
        dept = "–û—Ç–¥–µ–ª –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤"
        subdept = None
        pos = "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏"
        
        print(f"  –ü–æ–∑–∏—Ü–∏—è: {dept} / {subdept} / {pos}")
        
        # –ü–æ–ª—É—á–∞–µ–º position_id
        position_id = get_position_id(dept, subdept, pos)
        print(f"  Position ID: {position_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–∏—è
        task_file = get_task_file_for_position(dept, subdept, pos)
        print(f"  Task file: {task_file}")
        
        # –ü–æ–ª—É—á–∞–µ–º file_id
        if task_file:
            file_id = get_task_file_id(task_file)
            print(f"  File ID: {file_id}")
            
            if file_id:
                print("  ‚úÖ –í—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            else:
                print("  ‚ùå file_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print("  ‚ùå –§–∞–π–ª –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è CBC Crew Selection Bot")
    print(f"üìÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().isoformat()}")
    print(f"üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print()
    
    check_config_files()
    check_mappings()
    test_problematic_position()
    
    print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()