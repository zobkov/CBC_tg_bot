#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –∏–Ω—Ç–µ—Ä–≤—å—é.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
python3 manage_timeslots.py –î–ï–ù–¨ –í–†–ï–ú–Ø_–ù–ê–ß–ê–õ–ê –í–†–ï–ú–Ø_–ö–û–ù–¶–ê –î–û–°–¢–£–ü–ù–û–°–¢–¨ [--department –ù–û–ú–ï–†]

–ü—Ä–∏–º–µ—Ä—ã:
python3 manage_timeslots.py 2025-10-09 09:00 12:00 0 --department 1
python3 manage_timeslots.py 2025-10-09 14:00 16:00 1
"""

import asyncio
import sys
import argparse
from datetime import datetime, date, time
from typing import List, Dict, Tuple, Optional

import asyncpg
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode

from app.infrastructure.database.dao.interview import InterviewDAO
from app.services.interview_google_sync import InterviewGoogleSheetsSync
from config.config import load_config


class TimeslotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º-—Å–ª–æ—Ç–∞–º–∏"""
    
    def __init__(self, bot: Bot, db_conn: asyncpg.Connection):
        self.bot = bot
        self.db = db_conn
    
    async def find_nearest_timeslots(self, target_date: date, start_time: time, end_time: time, 
                                   department: Optional[int] = None) -> List[Dict]:
        """–ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç—ã –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –æ—Ç—Ä–µ–∑–∫—É"""
        
        base_query = """
        SELECT id, department_number, interview_date, start_time, is_available, reserved_by
        FROM interview_timeslots 
        WHERE interview_date = $1
        """
        params = [target_date]
        
        if department:
            base_query += " AND department_number = $2"
            params.append(department)
        
        base_query += " ORDER BY start_time"
        
        all_slots = await self.db.fetch(base_query, *params)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        matching_slots = []
        for slot in all_slots:
            slot_time = slot['start_time']
            if start_time <= slot_time <= end_time:
                matching_slots.append({
                    'id': slot['id'],
                    'department_number': slot['department_number'],
                    'interview_date': slot['interview_date'],
                    'start_time': slot['start_time'],
                    'is_available': slot['is_available'],
                    'reserved_by': slot['reserved_by']
                })
        
        return matching_slots
    
    async def get_affected_users(self, timeslot_ids: List[int]) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–≤—à–∏—Ö —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã"""
        if not timeslot_ids:
            return []
        
        query = """
        SELECT DISTINCT ts.reserved_by as user_id, a.full_name, a.telegram_username, 
               ts.id as timeslot_id, ts.interview_date, ts.start_time, ts.department_number
        FROM interview_timeslots ts
        LEFT JOIN applications a ON ts.reserved_by = a.user_id
        WHERE ts.id = ANY($1) AND ts.reserved_by IS NOT NULL
        """
        
        users = await self.db.fetch(query, timeslot_ids)
        return [dict(user) for user in users]
    
    async def update_timeslots_availability(self, timeslot_ids: List[int], is_available: bool) -> int:
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤"""
        if not timeslot_ids:
            return 0
        
        query = """
        UPDATE interview_timeslots 
        SET is_available = $1, updated = NOW()
        WHERE id = ANY($2)
        """
        
        result = await self.db.execute(query, is_available, timeslot_ids)
        # Extract number from result like "UPDATE 5"
        return int(result.split()[-1])
    
    async def reset_user_bookings(self, user_ids: List[int]) -> int:
        """–°–±—Ä–æ—Å–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not user_ids:
            return 0
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã
        slots_query = """
        SELECT DISTINCT department_number, interview_date, start_time, reserved_by
        FROM interview_timeslots 
        WHERE reserved_by = ANY($1)
        """
        
        slots_to_sync = await self.db.fetch(slots_query, user_ids)
        
        # –¢–µ–ø–µ—Ä—å —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        query = """
        UPDATE interview_timeslots 
        SET reserved_by = NULL, updated = NOW()
        WHERE reserved_by = ANY($1)
        """
        
        result = await self.db.execute(query, user_ids)
        updated_count = int(result.split()[-1])
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–±—Ä–æ—à–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
        if updated_count > 0 and slots_to_sync:
            try:
                dao = InterviewDAO(self.db)
                sync_service = InterviewGoogleSheetsSync(dao)
                
                for slot in slots_to_sync:
                    sync_task = asyncio.create_task(sync_service.sync_single_timeslot_change(
                        department_number=slot['department_number'],
                        slot_date=slot['interview_date'],
                        slot_time=slot['start_time'],
                        user_id=None  # None –æ–∑–Ω–∞—á–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    ))
                
                print(f"  üîÑ –ó–∞–ø—É—â–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets –¥–ª—è {len(slots_to_sync)} —Å–ª–æ—Ç–æ–≤")
            except Exception as e:
                print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets: {e}")
        
        return updated_count
    
    async def send_notification_to_user(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            message = (
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –≤—ã–±—Ä–∞–ª, –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. "
                "–í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è."
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚è∞ –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è",
                    callback_data="reschedule_interview"
                )]
            ])
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    async def notify_affected_users(self, users: List[Dict]) -> Dict[str, int]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        stats = {"success": 0, "errors": 0}
        
        for user in users:
            user_id = user['user_id']
            username = user.get('telegram_username', 'no_username')
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['full_name']} (@{username}, ID: {user_id})")
            
            success = await self.send_notification_to_user(user_id)
            if success:
                stats["success"] += 1
                print(f"  ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                stats["errors"] += 1
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        
        return stats


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Ç–∏–ª–∏—Ç—ã"""
    parser = argparse.ArgumentParser(
        description="–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python3 manage_timeslots.py 2025-10-09 09:00 12:00 0 --department 1
    –û—Ç–∫–ª—é—á–∏—Ç—å —Å–ª–æ—Ç—ã —Å 09:00 –¥–æ 12:00 –Ω–∞ 9 –æ–∫—Ç—è–±—Ä—è –¥–ª—è –æ—Ç–¥–µ–ª–∞ 1
  
  python3 manage_timeslots.py 2025-10-10 14:00 16:00 1
    –í–∫–ª—é—á–∏—Ç—å —Å–ª–æ—Ç—ã —Å 14:00 –¥–æ 16:00 –Ω–∞ 10 –æ–∫—Ç—è–±—Ä—è –¥–ª—è –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–æ–≤
        """
    )
    
    parser.add_argument("date", help="–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-10-09)")
    parser.add_argument("start_time", help="–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00)")
    parser.add_argument("end_time", help="–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12:00)")
    parser.add_argument("availability", type=int, choices=[0, 1], 
                       help="–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: 0 = –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, 1 = –¥–æ—Å—Ç—É–ø–Ω–æ")
    parser.add_argument("--department", type=int, 
                       help="–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ (1-6). –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º –æ—Ç–¥–µ–ª–∞–º")
    parser.add_argument("--dry-run", action="store_true",
                       help="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ, –Ω–æ –Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    
    args = parser.parse_args()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        target_date = datetime.strptime(args.date, "%Y-%m-%d").date()
        start_time = datetime.strptime(args.start_time, "%H:%M").time()
        end_time = datetime.strptime(args.end_time, "%H:%M").time()
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: {e}")
        return 1
    
    if start_time >= end_time:
        print("‚ùå –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
        return 1
    
    is_available = bool(args.availability)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    bot = Bot(token=config.tg_bot.token)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        db_conn = await asyncpg.connect(
            host=config.db_applications.host,
            port=config.db_applications.port,
            user=config.db_applications.user,
            password=config.db_applications.password,
            database=config.db_applications.database,
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return 1
    
    try:
        manager = TimeslotManager(bot, db_conn)
        
        print(f"üîç –ü–æ–∏—Å–∫ —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤...")
        print(f"  –î–∞—Ç–∞: {target_date}")
        print(f"  –í—Ä–µ–º—è: {start_time} - {end_time}")
        print(f"  –û—Ç–¥–µ–ª: {args.department if args.department else '–≤—Å–µ –æ—Ç–¥–µ–ª—ã'}")
        print(f"  –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {'–¥–æ—Å—Ç—É–ø–Ω–æ' if is_available else '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}")
        
        # –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç—ã
        matching_slots = await manager.find_nearest_timeslots(
            target_date, start_time, end_time, args.department
        )
        
        if not matching_slots:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤")
            return 1
        
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(matching_slots)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤:")
        
        timeslot_ids = []
        reserved_slots = []
        
        for slot in matching_slots:
            slot_id = slot['id']
            dept = slot['department_number']
            slot_time = slot['start_time']
            available = slot['is_available']
            reserved = slot['reserved_by']
            
            status_emoji = "üü¢" if available else "üî¥"
            reserved_emoji = "üîí" if reserved else "üîì"
            
            print(f"  {status_emoji} {reserved_emoji} ID:{slot_id} | –û—Ç–¥–µ–ª {dept} | {slot_time} | "
                  f"{'–î–æ—Å—Ç—É–ø–µ–Ω' if available else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'} | "
                  f"{'–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω' if reserved else '–°–≤–æ–±–æ–¥–µ–Ω'}")
            
            timeslot_ids.append(slot_id)
            if reserved:
                reserved_slots.append(slot_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        affected_users = []
        if reserved_slots:
            affected_users = await manager.get_affected_users(reserved_slots)
            
            if affected_users:
                print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: {len(affected_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–∏ —Å–ª–æ—Ç—ã:")
                for user in affected_users:
                    username = user.get('telegram_username', 'no_username')
                    print(f"  üë§ {user['full_name']} (@{username}, ID: {user['user_id']}) | "
                          f"–°–ª–æ—Ç {user['start_time']} –≤ –æ—Ç–¥–µ–ª–µ {user['department_number']}")
                
                if not is_available:  # –ï—Å–ª–∏ –¥–µ–ª–∞–µ–º —Å–ª–æ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
                    if args.dry_run:
                        print("\n[DRY RUN] –≠—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    else:
                        confirm = input(f"\n‚ùì –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {len(affected_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º "
                                      f"–∏ —Å–±—Ä–æ—Å–∏—Ç—å –∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è? (–¥–∞/yes/y): ").lower().strip()
                        
                        if confirm not in ['–¥–∞', 'yes', 'y']:
                            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                            return 0
        
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if args.dry_run:
            print(f"\n[DRY RUN] –ë—ã–ª–æ –±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ {len(timeslot_ids)} —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤")
            if affected_users and not is_available:
                print(f"[DRY RUN] –ë—ã–ª–æ –±—ã —Å–±—Ä–æ—à–µ–Ω–æ {len(affected_users)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
                print(f"[DRY RUN] –ë—ã–ª–æ –±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(affected_users)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        else:
            print(f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤...")
            
            # –û–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            updated_count = await manager.update_timeslots_availability(timeslot_ids, is_available)
            print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤")
            
            # –°–±—Ä–æ—Å–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if affected_users and not is_available:
                print(f"\nüì§ –°–±—Ä–æ—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
                
                # –°–±—Ä–æ—Å–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                user_ids = [user['user_id'] for user in affected_users]
                reset_count = await manager.reset_user_bookings(user_ids)
                print(f"  ‚úÖ –°–±—Ä–æ—à–µ–Ω–æ {reset_count} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
                
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                notification_stats = await manager.notify_affected_users(affected_users)
                print(f"  ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_stats['success']} —É—Å–ø–µ—à–Ω–æ, "
                      f"{notification_stats['errors']} –æ—à–∏–±–æ–∫")
        
        print(f"\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    finally:
        await db_conn.close()
        await bot.session.close()
    
    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)