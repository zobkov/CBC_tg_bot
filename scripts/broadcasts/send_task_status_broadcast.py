#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "accepted".
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–π –∏–∑ —Ç—Ä–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π.
"""
import asyncio
import argparse
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Tuple, Optional

from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from config.config import load_config
from app.infrastructure.database.connect_to_pg import get_pg_pool

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='#%(levelname)-8s [%(asctime)s] - %(filename)s:%(lineno)d - %(name)s:%(funcName)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
TEST_USER_ID = 257026813


async def get_user_task_status(pool, user_id: int) -> Dict[str, str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        Dict —Å –∫–ª—é—á–∞–º–∏ 'task_1', 'task_2', 'task_3' –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:
        - "—Ä–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" - –µ—Å–ª–∏ –ø—Ä–∏–Ω—è—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ—à–µ–Ω–∏–µ
        - "—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" - –µ—Å–ª–∏ –ø—Ä–∏–Ω—è—Ç –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ—à–µ–Ω–∏–µ  
        - "‚Äì" - –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—è—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    """
    async with pool.connection() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏–π
        cursor = await conn.execute("""
            SELECT 
                u.task_1_submitted, u.task_2_submitted, u.task_3_submitted,
                ea.accepted_1, ea.accepted_2, ea.accepted_3
            FROM users u
            LEFT JOIN evaluated_applications ea ON u.user_id = ea.user_id
            WHERE u.user_id = %s
        """, (user_id,))
        
        result = await cursor.fetchone()
        
        if not result:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            return {
                "task_1": "‚Äì",
                "task_2": "‚Äì", 
                "task_3": "‚Äì"
            }
        
        task_1_submitted, task_2_submitted, task_3_submitted, accepted_1, accepted_2, accepted_3 = result
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ evaluated_applications, –∑–Ω–∞—á–∏—Ç –Ω–µ –ø—Ä–∏–Ω—è—Ç
        if accepted_1 is None:
            accepted_1 = False
        if accepted_2 is None:
            accepted_2 = False
        if accepted_3 is None:
            accepted_3 = False
        
        status = {}
        
        for task_num in [1, 2, 3]:
            accepted = [accepted_1, accepted_2, accepted_3][task_num - 1]
            submitted = [task_1_submitted, task_2_submitted, task_3_submitted][task_num - 1]
            
            if not accepted:
                status[f"task_{task_num}"] = "üîí"
            elif submitted:
                status[f"task_{task_num}"] = "—Ä–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            else:
                status[f"task_{task_num}"] = "—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        
        return status


async def get_accepted_users_with_status(pool) -> List[Tuple[int, Dict[str, str]]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏—Ö –∑–∞–¥–∞–Ω–∏–π
    
    Returns:
        List of tuples: (user_id, task_status_dict)
    """
    async with pool.connection() as conn:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor = await conn.execute("""
            SELECT DISTINCT u.user_id
            FROM users u
            INNER JOIN evaluated_applications ea ON u.user_id = ea.user_id
            WHERE u.is_blocked = FALSE 
            AND (ea.accepted_1 = TRUE OR ea.accepted_2 = TRUE OR ea.accepted_3 = TRUE)
            ORDER BY u.user_id
        """)
        
        user_ids = [row[0] for row in await cursor.fetchall()]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_with_status = []
    for user_id in user_ids:
        status = await get_user_task_status(pool, user_id)
        users_with_status.append((user_id, status))
    
    return users_with_status


def format_task_status_message(task_status: Dict[str, str]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    message_template = """‚è∞ <b>–í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø –æ—Ç–±–æ—Ä–∞ –ö–ë–ö'26 –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —É–∂–µ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ!</b>

‰Ω†Â•Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ –æ—Ç–±–æ—Ä–∞. –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞—Å –æ—á–µ–Ω—å –≤–ø–µ—á–∞—Ç–ª–∏–ª–∞. –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã. –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫—Ä—É—Ç–æ–µ –≤–º–µ—Å—Ç–µ!

<b>–¢–≤–æ–π —Å—Ç–∞—Ç—É—Å:</b>
–í–∞–∫–∞–Ω—Å–∏—è ‚Ññ1: {task_1_status}
–í–∞–∫–∞–Ω—Å–∏—è ‚Ññ2: {task_2_status}
–í–∞–∫–∞–Ω—Å–∏—è ‚Ññ3: {task_3_status}

‚ÄºÔ∏è <b>–í–∞–∂–Ω–æ:</b> —á—Ç–æ–±—ã –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞–¥–æ <u><b>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ</b></u> –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.
–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç—É—Ç: https://docs.google.com/document/d/1fV2IA_k5eY3TSM4Xue1sYR1OS8-AkHDGN_t4ubKNMlA/edit?usp=sharing

<b>–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!</b>
–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @zobko
–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Ç–±–æ—Ä–æ–º: @cbc_assistant"""
    
    return message_template.format(
        task_1_status=task_status["task_1"],
        task_2_status=task_status["task_2"],
        task_3_status=task_status["task_3"]
    )


async def send_task_status_broadcast(test_mode: bool = True, dry_run: bool = False):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–¥–∞–Ω–∏–π
    
    Args:
        test_mode: –ï—Å–ª–∏ True, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        dry_run: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç
        bot = Bot(
            token=config.tg_bot.token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML),
        )
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –∑–∞—è–≤–æ–∫
        pool = await get_pg_pool(
            db_name=config.db_applications.database,
            host=config.db_applications.host,
            port=config.db_applications.port,
            user=config.db_applications.user,
            password=config.db_applications.password
        )
        
        if test_mode:
            # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            logger.info("–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", TEST_USER_ID)
            task_status = await get_user_task_status(pool, TEST_USER_ID)
            message_text = format_task_status_message(task_status)
            
            print(f"\n=== –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú ===")
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {TEST_USER_ID}")
            print(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏–π: {task_status}")
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ:")
            print(message_text)
            
            if dry_run:
                print("\nDRY RUN: –°–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            confirm = input("\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ? (y/N): ").strip().lower()
            if confirm != 'y':
                print("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
            
            try:
                await bot.send_message(chat_id=TEST_USER_ID, text=message_text)
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        
        else:
            # –ü–æ–ª–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø—Ä–∏–Ω—è—Ç—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            users_with_status = await get_accepted_users_with_status(pool)
            
            print(f"\n=== –ü–û–õ–ù–ê–Ø –†–ê–°–°–´–õ–ö–ê ===")
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(users_with_status)} –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            print("\n–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–µ—Ä–≤—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):")
            for i, (user_id, task_status) in enumerate(users_with_status[:5]):
                print(f"\n--- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ---")
                print(f"–°—Ç–∞—Ç—É—Å: {task_status}")
                message = format_task_status_message(task_status)
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message[:200]}...")
            
            if len(users_with_status) > 5:
                print(f"\n... –∏ –µ—â–µ {len(users_with_status) - 5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            if dry_run:
                print(f"\nDRY RUN: –°–æ–æ–±—â–µ–Ω–∏—è –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_with_status)}")
                return
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            confirm = input(f"\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è {len(users_with_status)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º? (y/N): ").strip().lower()
            if confirm != 'y':
                print("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            sent_count = 0
            error_count = 0
            
            for user_id, task_status in users_with_status:
                try:
                    message_text = format_task_status_message(task_status)
                    await bot.send_message(chat_id=user_id, text=message_text)
                    sent_count += 1
                    
                    # Rate limiting
                    await asyncio.sleep(0.05)
                    
                    if sent_count % 50 == 0:
                        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π", sent_count)
                        
                except Exception as e:
                    error_count += 1
                    logger.warning("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %s", user_id, e)
            
            print(f"\n‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}")
            print(f"–û—à–∏–±–æ–∫: {error_count}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        raise
    finally:
        try:
            await bot.session.close()
        except:
            pass


async def show_task_statistics():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–¥–∞–Ω–∏–π –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –∑–∞—è–≤–æ–∫
        pool = await get_pg_pool(
            db_name=config.db_applications.database,
            host=config.db_applications.host,
            port=config.db_applications.port,
            user=config.db_applications.user,
            password=config.db_applications.password
        )
        
        users_with_status = await get_accepted_users_with_status(pool)
        
        print(f"\n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–¥–∞–Ω–∏–π ===")
        print(f"–í—Å–µ–≥–æ –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_with_status)}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–¥–∞–Ω–∏—é
        for task_num in [1, 2, 3]:
            task_key = f"task_{task_num}"
            
            submitted_count = sum(1 for _, status in users_with_status if status[task_key] == "—Ä–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            not_submitted_count = sum(1 for _, status in users_with_status if status[task_key] == "—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            not_accepted_count = sum(1 for _, status in users_with_status if status[task_key] == "üîí")
            
            print(f"\n–ó–∞–¥–∞–Ω–∏–µ {task_num}:")
            print(f"  –†–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {submitted_count}")
            print(f"  –†–µ—à–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {not_submitted_count}")
            print(f"  –ù–µ –ø—Ä–∏–Ω—è—Ç: {not_accepted_count}")
            print(f"  –ò—Ç–æ–≥–æ –ø—Ä–∏–Ω—è—Ç—ã—Ö: {submitted_count + not_submitted_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_status = await get_user_task_status(pool, TEST_USER_ID)
        print(f"\n=== –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {TEST_USER_ID} ===")
        print(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏–π: {test_user_status}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise


def main():
    parser = argparse.ArgumentParser(
        description="–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏–π –ø—Ä–∏–Ω—è—Ç—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    send_parser = subparsers.add_parser('send', help='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–¥–∞–Ω–∏–π')
    send_parser.add_argument(
        '--test', 
        action='store_true', 
        help='–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
    )
    send_parser.add_argument(
        '--dry-run', 
        action='store_true', 
        help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏'
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_parser = subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–¥–∞–Ω–∏–π')
    
    args = parser.parse_args()
    
    if args.command == 'send':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        asyncio.run(send_task_status_broadcast(
            test_mode=args.test,
            dry_run=args.dry_run
        ))
        
    elif args.command == 'stats':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        asyncio.run(show_task_statistics())
        
    else:
        parser.print_help()


if __name__ == "__main__":
    main()