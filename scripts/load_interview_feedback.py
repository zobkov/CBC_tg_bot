#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –∏–Ω—Ç–µ—Ä–≤—å—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞
"""

import asyncio
import csv
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

import psycopg_pool
from config.config import load_config


async def load_interview_feedback_from_csv(csv_file_path: str, dry_run: bool = True):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –∏–Ω—Ç–µ—Ä–≤—å—é –∏–∑ CSV —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        csv_file_path: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
        dry_run: –ï—Å–ª–∏ True, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ë–î
    """
    
    config = load_config()
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö applications
    db_config = config.db_applications
    connection_string = f"postgresql://{db_config.user}:{db_config.password}@{db_config.host}:{db_config.port}/{db_config.database}"
    
    # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    feedbacks_to_update = []
    
    try:
        with open(csv_file_path, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            
            for row in reader:
                user_id = row.get('ID', '').strip()
                feedback = row.get('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', '').strip()
                
                if user_id and feedback:
                    try:
                        user_id_int = int(user_id)
                        feedbacks_to_update.append({
                            'user_id': user_id_int,
                            'feedback': feedback,
                            'username': row.get('Username', '').strip(),
                            'full_name': row.get('–§–ò–û', '').strip()
                        })
                    except ValueError:
                        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
                        continue
    
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_file_path}")
        return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞: {e}")
        return
    
    if not feedbacks_to_update:
        print("üìÑ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ CSV —Ñ–∞–π–ª–µ")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(feedbacks_to_update)} –∑–∞–ø–∏—Å–µ–π —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é:")
    print("-" * 80)
    
    for item in feedbacks_to_update:
        print(f"üë§ ID: {item['user_id']:<12} | @{item['username']:<15} | {item['full_name']}")
        print(f"üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {item['feedback'][:50]}{'...' if len(item['feedback']) > 50 else ''}")
        print("-" * 80)
    
    if dry_run:
        print("\nüîç DRY RUN: –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ù–ï –≤–Ω–µ—Å–µ–Ω—ã")
        print("–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --apply")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    confirm = input(f"\n‚ùì –û–±–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è {len(feedbacks_to_update)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? (y/N): ").strip().lower()
    
    if confirm != 'y':
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        async with psycopg_pool.AsyncConnectionPool(connection_string) as pool:
            async with pool.connection() as conn:
                async with conn.cursor() as cursor:
                    
                    updated_count = 0
                    
                    for item in feedbacks_to_update:
                        try:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ interview_feedback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            await cursor.execute("""
                                UPDATE users 
                                SET interview_feedback = %s 
                                WHERE user_id = %s
                            """, (item['feedback'], item['user_id']))
                            
                            if cursor.rowcount > 0:
                                updated_count += 1
                                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {item['user_id']} (@{item['username']})")
                            else:
                                print(f"‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {item['user_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                        
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {item['user_id']}: {e}")
                    
                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    await conn.commit()
                    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∏–∑ {len(feedbacks_to_update)} –∑–∞–ø–∏—Å–µ–π")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    if len(sys.argv) < 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python load_interview_feedback.py <–ø—É—Ç—å_–∫_csv_—Ñ–∞–π–ª—É> [--apply]")
        print("   --apply: –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é dry-run)")
        sys.exit(1)
    
    csv_file_path = sys.argv[1]
    dry_run = "--apply" not in sys.argv
    
    if not os.path.exists(csv_file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {csv_file_path}")
        sys.exit(1)
    
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –∏–Ω—Ç–µ—Ä–≤—å—é –∏–∑ CSV —Ñ–∞–π–ª–∞")
    print(f"üìÅ –§–∞–π–ª: {csv_file_path}")
    print(f"üîç –†–µ–∂–∏–º: {'DRY RUN' if dry_run else '–ü–†–ò–ú–ï–ù–ò–¢–¨ –ò–ó–ú–ï–ù–ï–ù–ò–Ø'}")
    print("=" * 80)
    
    asyncio.run(load_interview_feedback_from_csv(csv_file_path, dry_run))


if __name__ == "__main__":
    main()