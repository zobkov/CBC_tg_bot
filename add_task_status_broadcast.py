#!/usr/bin/env python3
"""
–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏–π –≤ broadcasts.json
"""
import json
import argparse
from datetime import datetime, timezone, timedelta
from pathlib import Path

# –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (UTC+3)
MOSCOW_TZ = timezone(timedelta(hours=3))

def add_task_status_broadcast(broadcast_file: str, datetime_str: str):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏–π –≤ broadcasts.json
    
    Args:
        broadcast_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É broadcasts.json
        datetime_str: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DDTHH:MM:SS+03:00"
    """
    
    # –®–∞–±–ª–æ–Ω –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏–π
    # –≠—Ç–æ—Ç —à–∞–±–ª–æ–Ω –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–∫—Ä–∏–ø—Ç–µ
    broadcast_template = {
        "datetime": datetime_str,
        "text": "TASK_STATUS_BROADCAST_PLACEHOLDER",
        "groups": ["accepted"]
    }
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª broadcasts.json
    broadcasts_path = Path(broadcast_file)
    
    if broadcasts_path.exists():
        with open(broadcasts_path, 'r', encoding='utf-8') as f:
            broadcasts = json.load(f)
    else:
        broadcasts = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É
    broadcasts.append(broadcast_template)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    broadcasts.sort(key=lambda x: x['datetime'])
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
    with open(broadcasts_path, 'w', encoding='utf-8') as f:
        json.dump(broadcasts, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ {datetime_str}")
    print(f"üìù –§–∞–π–ª: {broadcasts_path}")
    print(f"üìä –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ —Ñ–∞–π–ª–µ: {len(broadcasts)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏
    print("\n–î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å:")
    print(json.dumps(broadcast_template, ensure_ascii=False, indent=2))


def main():
    parser = argparse.ArgumentParser(
        description="–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏–π –≤ broadcasts.json"
    )
    
    parser.add_argument(
        'datetime',
        help='–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DDTHH:MM:SS+03:00" (–Ω–∞–ø—Ä–∏–º–µ—Ä: "2025-10-01T18:00:00+03:00")'
    )
    
    parser.add_argument(
        '--file',
        default='config/broadcasts.json',
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É broadcasts.json (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: config/broadcasts.json)'
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    try:
        dt = datetime.fromisoformat(args.datetime)
        if dt.tzinfo is None:
            print("‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: +03:00)")
            return
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: {e}")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DDTHH:MM:SS+03:00")
        print("–ü—Ä–∏–º–µ—Ä: 2025-10-01T18:00:00+03:00")
        return
    
    add_task_status_broadcast(args.file, args.datetime)


if __name__ == "__main__":
    main()