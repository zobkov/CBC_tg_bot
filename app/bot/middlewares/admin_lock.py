"""
Middleware –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞
"""
import logging
from typing import Callable, Dict, Any, Awaitable

from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message, CallbackQuery
from aiogram.fsm.storage.redis import RedisStorage

logger = logging.getLogger(__name__)

LOCK_KEY = "bot:lock_mode"


class AdminLockMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ-–∞–¥–º–∏–Ω–æ–≤ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç"""
    
    def __init__(self, admin_ids: list[int], storage: RedisStorage):
        self.admin_ids = set(admin_ids)
        self.storage = storage
        logger.info(f"AdminLockMiddleware –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–¥–º–∏–Ω–∞–º–∏: {admin_ids}")
    
    async def is_lock_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        try:
            redis = self.storage.redis
            result = await redis.get(LOCK_KEY)
            return result == b"1" if result else False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∂–∏–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ middleware"""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è
        user = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –≤ Update
        if hasattr(event, 'message') and event.message and hasattr(event.message, 'from_user'):
            user = event.message.from_user
        elif hasattr(event, 'callback_query') and event.callback_query and hasattr(event.callback_query, 'from_user'):
            user = event.callback_query.from_user
        elif hasattr(event, 'inline_query') and event.inline_query and hasattr(event.inline_query, 'from_user'):
            user = event.inline_query.from_user
        elif hasattr(event, 'from_user') and event.from_user:
            user = event.from_user
        
        if not user:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
            logger.debug(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–±—ã—Ç–∏–∏ {type(event).__name__}")
            return await handler(event, data)
        
        user_id = user.id
        logger.debug(f"Middleware: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        lock_enabled = await self.is_lock_enabled()
        logger.debug(f"Middleware: —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ = {lock_enabled}")
        
        if not lock_enabled:
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Ö–æ–¥–∏—Ç - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞")
            return await handler(event, data)
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
        is_admin = user_id in self.admin_ids
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–¥–º–∏–Ω: {is_admin}")
        
        if is_admin:
            # –ê–¥–º–∏–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
            logger.debug(f"–ê–¥–º–∏–Ω {user_id} –ø—Ä–æ—Ö–æ–¥–∏—Ç - —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–∫–ª—é—á–µ–Ω")
            return await handler(event, data)
        
        # –ù–µ-–∞–¥–º–∏–Ω –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ - –±–ª–æ–∫–∏—Ä—É–µ–º
        logger.warning(f"üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{user.username}) - —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–∫–ª—é—á–µ–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        message_to_answer = None
        callback_to_answer = None
        
        if hasattr(event, 'message') and event.message:
            message_to_answer = event.message
        elif hasattr(event, 'callback_query') and event.callback_query:
            callback_to_answer = event.callback_query
        
        if callback_to_answer:
            await callback_to_answer.answer(
                "üîí –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                show_alert=True
            )
        elif message_to_answer:
            await message_to_answer.answer(
                "üîí –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
        # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä
        return None


async def set_lock_mode(storage: RedisStorage, enabled: bool) -> bool:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    try:
        redis = storage.redis
        if enabled:
            await redis.set(LOCK_KEY, "1")
            logger.info("–†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Redis: 1")
        else:
            await redis.set(LOCK_KEY, "0")
            logger.info("–†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Redis: 0")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∂–∏–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        return False


async def is_lock_mode_enabled(storage: RedisStorage) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    try:
        redis = storage.redis
        result = await redis.get(LOCK_KEY)
        logger.debug(f"–ó–Ω–∞—á–µ–Ω–∏–µ –≤ Redis –¥–ª—è –∫–ª—é—á–∞ {LOCK_KEY}: {result} (—Ç–∏–ø: {type(result)})")
        is_enabled = result == b"1" if result else False
        logger.debug(f"–†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–∫–ª—é—á–µ–Ω: {is_enabled}")
        return is_enabled
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∂–∏–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        return False