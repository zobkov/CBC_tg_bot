"""
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
"""
import logging

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from app.bot.middlewares.admin_lock import set_lock_mode, is_lock_mode_enabled

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
admin_commands_router = Router(name="admin_commands")


class AdminFilter:
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–æ–≤"""
    
    def __init__(self, admin_ids: list[int]):
        self.admin_ids = set(admin_ids)
    
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in self.admin_ids


def setup_admin_commands_router(admin_ids: list[int]) -> Router:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä —Å –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è ID: {admin_ids}")
    
    admin_check = AdminFilter(admin_ids)
    
    @admin_commands_router.message(Command("lock"), admin_check)
    async def cmd_lock(message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /lock - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤"""
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /lock")
        storage = state.storage
        
        current_mode = await is_lock_mode_enabled(storage)
        logger.info(f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {current_mode}")
        
        if current_mode:
            # –†–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω - –≤—ã–∫–ª—é—á–∞–µ–º
            success = await set_lock_mode(storage, False)
            if success:
                await message.answer(
                    "üîì –†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω!\n"
                    "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–Ω–æ–≤–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É."
                )
                logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–∫–ª—é—á–∏–ª —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ /lock")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        else:
            # –†–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω - –≤–∫–ª—é—á–∞–µ–º
            success = await set_lock_mode(storage, True)
            if success:
                await message.answer(
                    "üîí –†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–∫–ª—é—á–µ–Ω!\n"
                    "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã."
                )
                logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–∫–ª—é—á–∏–ª —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ /lock")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
    
    @admin_commands_router.message(Command("unlock"), admin_check)
    async def cmd_unlock(message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /unlock - –≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /unlock")
        storage = state.storage
        
        current_mode = await is_lock_mode_enabled(storage)
        
        if not current_mode:
            await message.answer(
                "üîì –†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω!\n"
                "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É."
            )
        else:
            success = await set_lock_mode(storage, False)
            if success:
                await message.answer(
                    "üîì –†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω!\n"
                    "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–Ω–æ–≤–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É."
                )
                logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–∫–ª—é—á–∏–ª —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
    
    @admin_commands_router.message(Command("status"), admin_check)
    async def cmd_status(message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        storage = state.storage
        
        current_mode = await is_lock_mode_enabled(storage)
        logger.info(f"–°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {current_mode}")
        
        if current_mode:
            status_text = "üîí –†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –í–ö–õ–Æ–ß–ï–ù"
            details = "–í—Å–µ –Ω–µ-–∞–¥–º–∏–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã"
        else:
            status_text = "üîì –†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –í–´–ö–õ–Æ–ß–ï–ù"
            details = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø"
        
        admin_list = ", ".join(map(str, admin_ids))
        
        await message.answer(
            f"{status_text}\n\n"
            f"üìä –î–µ—Ç–∞–ª–∏:\n"
            f"‚Ä¢ {details}\n"
            f"‚Ä¢ –ê–¥–º–∏–Ω—ã: {admin_list}\n\n"
            f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"‚Ä¢ /lock - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É\n"
            f"‚Ä¢ /unlock - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É\n"
            f"‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
        )
    
    return admin_commands_router

import logging
from typing import Any
from aiogram import Router, F
from aiogram.types import Update, Message, CallbackQuery
from aiogram.filters import Command, Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
admin_lock_router = Router(name="admin_lock")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Redis –∫–ª—é—á–µ–π
LOCK_KEY = "bot:lock_mode"


class AdminFilter(Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
    
    def __init__(self, admin_ids: list[int]):
        self.admin_ids = admin_ids
    
    async def __call__(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        is_admin = message.from_user.id in self.admin_ids
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞: user_id={message.from_user.id}, is_admin={is_admin}")
        return is_admin


class NonAdminFilter(Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤"""
    
    def __init__(self, admin_ids: list[int]):
        self.admin_ids = admin_ids
    
    async def __call__(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∞–¥–º–∏–Ω"""
        is_non_admin = message.from_user.id not in self.admin_ids
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ-–∞–¥–º–∏–Ω–∞: user_id={message.from_user.id}, is_non_admin={is_non_admin}")
        return is_non_admin


class NonAdminCallbackFilter(Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è callback'–æ–≤ –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–æ–≤"""
    
    def __init__(self, admin_ids: list[int]):
        self.admin_ids = admin_ids
    
    async def __call__(self, callback_query: CallbackQuery) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∞–¥–º–∏–Ω"""
        is_non_admin = callback_query.from_user.id not in self.admin_ids
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ-–∞–¥–º–∏–Ω–∞ (callback): user_id={callback_query.from_user.id}, is_non_admin={is_non_admin}")
        return is_non_admin


async def is_lock_mode_enabled(storage: RedisStorage) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    try:
        redis = storage.redis
        result = await redis.get(LOCK_KEY)
        logger.debug(f"–ó–Ω–∞—á–µ–Ω–∏–µ –≤ Redis –¥–ª—è –∫–ª—é—á–∞ {LOCK_KEY}: {result} (—Ç–∏–ø: {type(result)})")
        # Redis –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç bytes, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å b"1"
        is_enabled = result == b"1" if result else False
        logger.debug(f"–†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–∫–ª—é—á–µ–Ω: {is_enabled}")
        return is_enabled
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∂–∏–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        return False


async def set_lock_mode(storage: RedisStorage, enabled: bool) -> bool:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    try:
        redis = storage.redis
        if enabled:
            await redis.set(LOCK_KEY, "1")
            logger.info("–†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Redis: 1")
        else:
            await redis.set(LOCK_KEY, "0")
            logger.info("–†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Redis: 0")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∂–∏–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        return False


def setup_admin_lock_router(admin_ids: list[int]) -> Router:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä —Å –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è ID: {admin_ids}")
    
    admin_check = AdminFilter(admin_ids)
    non_admin_check = NonAdminFilter(admin_ids)
    non_admin_callback_check = NonAdminCallbackFilter(admin_ids)
    
    @admin_lock_router.message(Command("lock"), admin_check)
    async def cmd_lock(message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /lock - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤"""
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /lock")
        storage = state.storage
        
        current_mode = await is_lock_mode_enabled(storage)
        logger.info(f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {current_mode}")
        
        if current_mode:
            # –†–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω - –≤—ã–∫–ª—é—á–∞–µ–º
            success = await set_lock_mode(storage, False)
            if success:
                await message.answer(
                    "ÔøΩ –†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω!\n"
                    "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–Ω–æ–≤–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É."
                )
                logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–∫–ª—é—á–∏–ª —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ /lock")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        else:
            # –†–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω - –≤–∫–ª—é—á–∞–µ–º
            success = await set_lock_mode(storage, True)
            if success:
                await message.answer(
                    "üîí –†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–∫–ª—é—á–µ–Ω!\n"
                    "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã."
                )
                logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–∫–ª—é—á–∏–ª —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ /lock")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
    
    @admin_lock_router.message(Command("unlock"), admin_check)
    async def cmd_unlock(message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /unlock - –≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /unlock")
        storage = state.storage
        
        current_mode = await is_lock_mode_enabled(storage)
        
        if not current_mode:
            await message.answer(
                "üîì –†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω!\n"
                "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É."
            )
        else:
            success = await set_lock_mode(storage, False)
            if success:
                await message.answer(
                    "üîì –†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω!\n"
                    "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–Ω–æ–≤–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É."
                )
                logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–∫–ª—é—á–∏–ª —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
    
    @admin_lock_router.message(Command("status"), admin_check)
    async def cmd_status(message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        storage = state.storage
        
        current_mode = await is_lock_mode_enabled(storage)
        logger.info(f"–°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {current_mode}")
        
        if current_mode:
            status_text = "üîí –†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –í–ö–õ–Æ–ß–ï–ù"
            details = "–í—Å–µ –Ω–µ-–∞–¥–º–∏–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã"
        else:
            status_text = "üîì –†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –í–´–ö–õ–Æ–ß–ï–ù"
            details = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø"
        
        admin_list = ", ".join(map(str, admin_ids))
        
        await message.answer(
            f"{status_text}\n\n"
            f"üìä –î–µ—Ç–∞–ª–∏:\n"
            f"‚Ä¢ {details}\n"
            f"‚Ä¢ –ê–¥–º–∏–Ω—ã: {admin_list}\n\n"
            f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"‚Ä¢ /lock - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É\n"
            f"‚Ä¢ /unlock - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É\n"
            f"‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
        )
    
    @admin_lock_router.message(non_admin_check)
    async def handle_non_admin_message(message: Message, state: FSMContext):
        """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        storage = state.storage
        
        lock_enabled = await is_lock_mode_enabled(storage)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–∞ {message.from_user.id} (@{message.from_user.username}), —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {lock_enabled}")
        
        if lock_enabled:
            await message.answer(
                "üîí –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            logger.warning(f"üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} (@{message.from_user.username}) - —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–∫–ª—é—á–µ–Ω")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
            return True
        else:
            logger.debug(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–∞ {message.from_user.id} - —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω")
    
    @admin_lock_router.callback_query(non_admin_callback_check)
    async def handle_non_admin_callback(callback_query: CallbackQuery, state: FSMContext):
        """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback'–∏ –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        storage = state.storage
        
        lock_enabled = await is_lock_mode_enabled(storage)
        logger.info(f"Callback –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–∞ {callback_query.from_user.id} (@{callback_query.from_user.username}), —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {lock_enabled}")
        
        if lock_enabled:
            await callback_query.answer(
                "üîí –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                show_alert=True
            )
            logger.warning(f"üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù callback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id} (@{callback_query.from_user.username}) - —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–∫–ª—é—á–µ–Ω")
            return True
        else:
            logger.debug(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º callback –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–∞ {callback_query.from_user.id} - —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω")
    
    return admin_lock_router