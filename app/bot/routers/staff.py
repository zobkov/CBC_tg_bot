"""
–†–æ—É—Ç–µ—Ä –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (staff)
"""
import logging
from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message

from app.bot.filters.legacy_intents import create_rbac_filter_with_legacy_exclusion
from app.enums.roles import Role

logger = logging.getLogger(__name__)

router = Router(name="staff")

# –§–∏–ª—å—Ç—Ä –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º legacy –∏–Ω—Ç–µ–Ω—Ç–æ–≤
staff_filter = create_rbac_filter_with_legacy_exclusion(Role.STAFF, Role.ADMIN)
router.message.filter(staff_filter)
router.callback_query.filter(staff_filter)


@router.message(Command("staff_panel"))
async def staff_panel_command(message: Message):
    """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    await message.answer(
        "üëî <b>–ü–∞–Ω–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ö–ë–ö</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n"
        "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n"
        "‚Ä¢ /applications - –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫\n"
        "‚Ä¢ /stats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ /export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
        "‚Ä¢ /broadcast - –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "‚Ä¢ /moderate - –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "‚Ä¢ /support_queue - –û—á–µ—Ä–µ–¥—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
        "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        "‚Ä¢ /user_info <id> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        "‚Ä¢ /user_status <id> - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"
    )


@router.message(Command("applications"))
async def applications_command(message: Message, db=None):
    """–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    if not db:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫
        await message.answer(
            "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫</b>\n\n"
            "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
            "–ë—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:\n"
            "‚Ä¢ –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º\n"
            "‚Ä¢ –ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É"
        )
    except Exception as e:
        logger.error(f"Error getting applications: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫")


@router.message(Command("stats"))
async def detailed_stats_command(message: Message, db=None):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    if not db:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await message.answer(
            "üìà <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
            "–ë—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å:\n"
            "‚Ä¢ –î–∏–Ω–∞–º–∏–∫—É –ø–æ–¥–∞—á –∑–∞—è–≤–æ–∫\n"
            "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—é –ø–æ —ç—Ç–∞–ø–∞–º\n"
            "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –ù–∞–≥—Ä—É–∑–∫—É –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
            "‚Ä¢ –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
        )
    except Exception as e:
        logger.error(f"Error getting detailed stats: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.message(Command("user_info"))
async def user_info_command(message: Message, command: CommandObject, db=None):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not command.args:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "–ü—Ä–∏–º–µ—Ä: /user_info 123456789"
            )
            return
        
        user_id = int(command.args.strip())
        
        if not db:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        user = await db.users.get_user_record(user_id=user_id)
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        roles_text = ", ".join(user.roles) if user.roles else "–Ω–µ—Ç —Ä–æ–ª–µ–π"
        
        info_text = (
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}</b>\n\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created.strftime('%d.%m.%Y %H:%M')}\n"
            f"üåê –Ø–∑—ã–∫: {user.language}\n"
            f"üè∑ –†–æ–ª–∏: {roles_text}\n"
            f"üíö –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if user.is_alive else '–ù–µ—Ç'}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if user.is_blocked else '–ù–µ—Ç'}\n"
            f"üìä –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {user.submission_status}\n\n"
            f"üìå <b>–ó–∞–¥–∞–Ω–∏—è:</b>\n"
            f"‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ 1: {'‚úÖ –°–¥–∞–Ω–æ' if user.task_1_submitted else 'üìù –ù–µ —Å–¥–∞–Ω–æ'}\n"
            f"‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ 2: {'‚úÖ –°–¥–∞–Ω–æ' if user.task_2_submitted else 'üìù –ù–µ —Å–¥–∞–Ω–æ'}\n"
            f"‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ 3: {'‚úÖ –°–¥–∞–Ω–æ' if user.task_3_submitted else 'üìù –ù–µ —Å–¥–∞–Ω–æ'}"
        )
        
        await message.answer(info_text)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"Error getting user info: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")


@router.message(Command("broadcast"))
async def broadcast_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await message.answer(
        "üì¢ <b>–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
        "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
        "–ë—É–¥–µ—Ç –ø–æ–∑–≤–æ–ª—è—Ç—å:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        "üí° –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞—Å—Å—ã–ª–æ–∫"
    )


@router.message(Command("support_queue"))
async def support_queue_command(message: Message):
    """–û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    await message.answer(
        "üé´ <b>–û—á–µ—Ä–µ–¥—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
        "–ë—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:\n"
        "‚Ä¢ –ù–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è\n"
        "‚Ä¢ –û–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ\n"
        "‚Ä¢ –≠—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"
    )