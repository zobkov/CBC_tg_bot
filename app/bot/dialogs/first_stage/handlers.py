import os
import csv
import logging
from datetime import datetime
from typing import Any

from aiogram import Bot
from aiogram.types import Message, CallbackQuery, Document, User
from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.input import MessageInput

from config.config import Config
from app.infrastructure.database.database.db import DB
from app.bot.enums.application_status import ApplicationStatus
from app.services.error_monitoring import error_monitor

logger = logging.getLogger(__name__)


async def process_name(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    name = message.text.strip()
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∏–º—è: {name}")
    dialog_manager.dialog_data["name"] = name
    await dialog_manager.next()


async def process_surname(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    surname = message.text.strip()
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Ñ–∞–º–∏–ª–∏—é: {surname}")
    dialog_manager.dialog_data["surname"] = surname
    await dialog_manager.next()


async def process_patronymic(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    patronymic = message.text.strip()
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –æ—Ç—á–µ—Å—Ç–≤–æ: {patronymic}")
    dialog_manager.dialog_data["patronymic"] = patronymic
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
    name = dialog_manager.dialog_data.get("name", "")
    surname = dialog_manager.dialog_data.get("surname", "")
    full_name = f"{surname} {name} {patronymic}".strip()
    dialog_manager.dialog_data["full_name"] = full_name
    logger.info(f"‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–Ω–æ–µ –∏–º—è: {full_name}")
    await dialog_manager.next()


async def process_university(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    university = message.text.strip()
    logger.info(f"üè´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: {university}")
    dialog_manager.dialog_data["university"] = university
    await dialog_manager.next()


async def process_course(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    try:
        course = int(message.text.strip())
        if course < 1 or course > 6:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å: {course}")
            error_monitor.log_validation_error(
                field="course",
                value=str(course),
                user_id=message.from_user.id,
                username=message.from_user.username
            )
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –æ—Ç 1 –¥–æ 6")
            return
        
        logger.info(f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∫—É—Ä—Å: {course}")
        dialog_manager.dialog_data["course"] = str(course)
        await dialog_manager.next()
    except ValueError:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {message.text}")
        error_monitor.log_validation_error(
            field="course",
            value=message.text,
            user_id=message.from_user.id,
            username=message.from_user.username
        )
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6")


async def process_phone(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    phone = message.text.strip()
    logger.info(f"üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω: {phone[:4]}***")  # –ß–∞—Å—Ç–∏—á–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if len(phone) < 10:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return
        
    dialog_manager.dialog_data["phone"] = phone
    await dialog_manager.next()


async def process_email(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    email = message.text.strip()
    logger.info(f"üìß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª email: {email}")
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    import re
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if re.match(email_pattern, email):
        logger.info(f"‚úÖ Email –≤–∞–ª–∏–¥–µ–Ω: {email}")
        dialog_manager.dialog_data["email"] = email
        await dialog_manager.next()
    else:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email: {email}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")


async def process_experience(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    experience = message.text.strip()
    logger.info(f"üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã ({len(experience)} —Å–∏–º–≤–æ–ª–æ–≤)")
    dialog_manager.dialog_data["experience"] = experience
    await dialog_manager.next()


async def process_motivation(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    motivation = message.text.strip()
    logger.info(f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –º–æ—Ç–∏–≤–∞—Ü–∏—é ({len(motivation)} —Å–∏–º–≤–æ–ª–æ–≤)")
    dialog_manager.dialog_data["motivation"] = motivation
    await dialog_manager.next()


async def process_resume_file(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    bot: Bot = dialog_manager.middleware_data["bot"]
    document: Document = message.document
    user = message.from_user
    
    logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (@{user.username})")
    
    if not document:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ.")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    logger.info(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:")
    logger.info(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {document.file_name}")
    logger.info(f"   - –†–∞–∑–º–µ—Ä: {document.file_size} –±–∞–π—Ç ({document.file_size / 1024 / 1024:.2f} –ú–ë)")
    logger.info(f"   - MIME-—Ç–∏–ø: {document.mime_type}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 20 –ú–ë)
    max_size = 20 * 1024 * 1024
    if document.file_size > max_size:
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {document.file_size} –±–∞–π—Ç")
        await message.answer("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    dialog_data = dialog_manager.dialog_data
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ
    surname = dialog_data.get("surname", "")
    name = dialog_data.get("name", "")
    patronymic = dialog_data.get("patronymic", "")
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not surname or surname.strip() == "":
        surname = "User"
    if not name or name.strip() == "":
        name = "Unknown"
    if not patronymic or patronymic.strip() == "":
        patronymic = "Unknown"

    logger.info(f"üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞:")
    logger.info(f"   - –§–∞–º–∏–ª–∏—è: {surname}")
    logger.info(f"   - –ò–º—è: {name}")
    logger.info(f"   - –û—Ç—á–µ—Å—Ç–≤–æ: {patronymic}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –∏–º–µ–Ω–∏ –∏ –æ—Ç—á–µ—Å—Ç–≤–∞
    name_initial = name[0].upper() if name and len(name) > 0 and name != "Unknown" else "U"
    
    # –î–ª—è –∏–Ω–∏—Ü–∏–∞–ª–æ–≤: –µ—Å–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞–ª –∏–º–µ–Ω–∏
    if patronymic and patronymic.strip() != "" and patronymic != "Unknown":
        patronymic_initial = patronymic[0].upper()
        initials = f"{name_initial}{patronymic_initial}"
        logger.info(f"   üìù –ò–Ω–∏—Ü–∏–∞–ª—ã (—Å –æ—Ç—á–µ—Å—Ç–≤–æ–º): {initials}")
    else:
        initials = name_initial
        logger.info(f"   üìù –ò–Ω–∏—Ü–∏–∞–ª—ã (–±–µ–∑ –æ—Ç—á–µ—Å—Ç–≤–∞): {initials}")
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    file_extension = os.path.splitext(document.file_name)[1] if document.file_name else ".pdf"
    new_filename = f"{surname}_{initials}_{user.username or user.id}_{timestamp}{file_extension}"
    
    logger.info(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞: {new_filename}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
        file = await bot.get_file(document.file_id)
        file_path = f"app/storage/resumes/{new_filename}"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await bot.download_file(file.file_path, file_path)
        logger.info(f"‚úÖ –§–∞–π–ª —Ä–µ–∑—é–º–µ —Å–∫–∞—á–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Drive
        config: Config = dialog_manager.middleware_data.get("config")
        google_file_url = None
        
        # Google Drive –∑–∞–≥—Ä—É–∑–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)
        if config and config.google and config.google.enable_drive:
            logger.info(f"üîÑ Google Drive –≤–∫–ª—é—á–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            try:
                from app.services.google_services import GoogleServicesManager
                import asyncio
                
                # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä Google —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                google_manager = GoogleServicesManager(
                    credentials_path=config.google.credentials_path,
                    spreadsheet_id=config.google.spreadsheet_id,
                    drive_folder_id=config.google.drive_folder_id or "",
                    enable_drive=config.google.enable_drive
                )
                
                logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ {new_filename} –≤ Google Drive...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
                loop = asyncio.get_event_loop()
                google_file_url = await loop.run_in_executor(
                    None, 
                    google_manager.upload_file_to_drive,
                    file_path,
                    new_filename
                )
                
                if google_file_url:
                    logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive: {google_file_url}")
                    dialog_manager.dialog_data["resume_google_url"] = google_file_url
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ Google Drive - –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π URL")
                    dialog_manager.dialog_data["resume_google_error"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ñ–∞–π–ª–∞ –≤ Google Drive"
                
            except Exception as e:
                error_msg = str(e)
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ –≤ Google Drive: {e}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if "Service Accounts do not have storage quota" in error_msg:
                    user_error_msg = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—â–∏–π –¥–∏—Å–∫ Google"
                    logger.warning("‚ö†Ô∏è Google Drive: —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∏–º–µ–µ—Ç –∫–≤–æ—Ç—ã —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ - –Ω—É–∂–µ–Ω Shared Drive")
                elif "storageQuotaExceeded" in error_msg:
                    user_error_msg = "–ù–∞ Google Drive –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞"
                    logger.warning("‚ö†Ô∏è Google Drive: –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
                elif "quotaExceeded" in error_msg:
                    user_error_msg = "–ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã Google Drive API"
                    logger.warning("‚ö†Ô∏è Google Drive: –ø—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã API")
                elif "403" in error_msg:
                    user_error_msg = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Google Drive"
                    logger.warning("‚ö†Ô∏è Google Drive: –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (403)")
                elif "401" in error_msg:
                    user_error_msg = "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Drive"
                    logger.warning("‚ö†Ô∏è Google Drive: –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401)")
                elif "404" in error_msg:
                    user_error_msg = "–ü–∞–ø–∫–∞ –Ω–∞ Google Drive –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    logger.warning("‚ö†Ô∏è Google Drive: –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404)")
                else:
                    user_error_msg = f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Google Drive"
                    logger.error(f"‚ö†Ô∏è Google Drive: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ - {error_msg}")
                
                dialog_manager.dialog_data["resume_google_error"] = user_error_msg
        else:
            if not config:
                logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - Google Drive –æ—Ç–∫–ª—é—á–µ–Ω")
            elif not config.google:
                logger.info("‚ÑπÔ∏è Google Services –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            elif not config.google.enable_drive:
                logger.info("‚ÑπÔ∏è Google Drive –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞
        dialog_manager.dialog_data["resume_file"] = new_filename
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        message_text = f"‚úÖ –†–µ–∑—é–º–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {new_filename}\n"
        
        if google_file_url:
            message_text += "üìÅ –§–∞–π–ª —Ç–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive\n"
        elif config and config.google and config.google.enable_drive:
            error = dialog_manager.dialog_data.get("resume_google_error", "")
            message_text += f"‚ö†Ô∏è –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive: {error}\n"
        else:
            message_text += "üìã –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ (Google Drive –æ—Ç–∫–ª—é—á–µ–Ω)\n"
            
        message_text += "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É."
        
        await message.answer(message_text)
        
        # –í–ê–ñ–ù–û: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–∫–Ω—É –¥–∏–∞–ª–æ–≥–∞
        logger.info(f"‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–∫–Ω—É –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        await dialog_manager.next()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Ä–µ–∑—é–º–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return


async def on_confirm_application(callback: CallbackQuery, button, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    await save_application(dialog_manager)
    await dialog_manager.next()


async def save_application(dialog_manager: DialogManager):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –ë–î –∏ —ç–∫—Å–ø–æ—Ä—Ç"""
    from aiogram.types import User
    
    event_from_user: User = dialog_manager.event.from_user
    dialog_data = dialog_manager.dialog_data
    config: Config = dialog_manager.middleware_data.get("config")
    db: DB = dialog_manager.middleware_data.get("db")
    
    logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event_from_user.id} (@{event_from_user.username})")
    
    if not config or not db:
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ë–î")
        if not config:
            logger.error("‚ùå Config –æ–±—ä–µ–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        if not db:
            logger.error("‚ùå DB –æ–±—ä–µ–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return
    
    logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ë–î –¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤ process_resume_file)
    resume_local_path = None
    resume_google_drive_url = None
    
    resume_filename = dialog_data.get("resume_file")
    if resume_filename:
        resume_local_path = f"app/storage/resumes/{resume_filename}"
        resume_google_drive_url = dialog_data.get("resume_google_url", "")
        logger.info(f"üìÑ –§–∞–π–ª —Ä–µ–∑—é–º–µ: {resume_filename}")
        if resume_google_drive_url:
            logger.info(f"‚òÅÔ∏è Google Drive URL: {resume_google_drive_url}")
        else:
            logger.info(f"üíæ –¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ")
    else:
        logger.warning("‚ö†Ô∏è –§–∞–π–ª —Ä–µ–∑—é–º–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    logger.info(f"üìä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏...")
    
    # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
    try:
        how_found_idx = int(dialog_data.get("how_found_kbk", "0"))
        how_found_text = config.selection.how_found_options[how_found_idx] if how_found_idx < len(config.selection.how_found_options) else ""
        logger.info(f"üîç –ö–∞–∫ —É–∑–Ω–∞–ª –æ –ö–ë–ö: {how_found_text}")
    except (ValueError, IndexError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ 'how_found_kbk': {e}")
        how_found_text = ""
    
    try:
        department_key = dialog_data.get("selected_department", "")
        department_name = config.selection.departments.get(department_key, {}).get("name", "")
        logger.info(f"üè¢ –í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {department_name} ({department_key})")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞: {e}")
        department_name = ""
    
    try:
        position_idx = int(dialog_data.get("selected_position", "0"))
        if department_key in config.selection.departments:
            positions = config.selection.departments[department_key]["positions"]
            position_text = positions[position_idx] if position_idx < len(positions) else ""
        else:
            position_text = ""
        logger.info(f"üíº –í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {position_text}")
    except (ValueError, IndexError, KeyError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        position_text = ""
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logger.info(f"üë§ –§–ò–û: {dialog_data.get('full_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
    logger.info(f"üéì –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: {dialog_data.get('university', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
    logger.info(f"üìö –ö—É—Ä—Å: {dialog_data.get('course', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
    logger.info(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {dialog_data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
    logger.info(f"üìß Email: {dialog_data.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ submitted
    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    try:
        await db.applications.update_first_stage_form(
            user_id=event_from_user.id,
            full_name=dialog_data.get("full_name", ""),
            university=dialog_data.get("university", ""),
            course=int(dialog_data.get("course", "1")),
            phone=dialog_data.get("phone", ""),
            email=dialog_data.get("email", ""),
            telegram_username=event_from_user.username or "",
            how_found_kbk=how_found_text,
            department=department_name,
            position=position_text,
            experience=dialog_data.get("experience", ""),
            motivation=dialog_data.get("motivation", ""),
            resume_local_path=resume_local_path,
            resume_google_drive_url=resume_google_drive_url
        )
        
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ SUBMITTED
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ SUBMITTED...")
        await db.applications.update_application_status(
            user_id=event_from_user.id,
            status=ApplicationStatus.SUBMITTED
        )
        
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ SUBMITTED")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
        logger.error(f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: {dialog_data}")
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    logger.info(f"üì§ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...")
    
    application_data = {
        'timestamp': datetime.now().isoformat(),
        'user_id': event_from_user.id,
        'username': event_from_user.username or "",
        'full_name': dialog_data.get("full_name", ""),
        'university': dialog_data.get("university", ""),
        'course': dialog_data.get("course", "1"),
        'phone': dialog_data.get("phone", ""),
        'email': dialog_data.get("email", ""),
        'how_found_kbk': how_found_text,
        'department': department_name,
        'position': position_text,
        'experience': dialog_data.get("experience", ""),
        'motivation': dialog_data.get("motivation", ""),
        'status': 'submitted',
        'resume_local_path': resume_local_path or "",
        'resume_google_drive_url': resume_google_drive_url or ""
    }
    
    logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV –¥–ª—è –±–µ–∫–∞–ø–∞
    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ CSV...")
    try:
        await save_to_csv(application_data)
        logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ CSV")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Sheets –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    if config.google:
        logger.info(f"‚òÅÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets...")
        try:
            from app.services.google_services import GoogleServicesManager
            google_manager = GoogleServicesManager(
                credentials_path=config.google.credentials_path,
                spreadsheet_id=config.google.spreadsheet_id,
                drive_folder_id=config.google.drive_folder_id,
                enable_drive=config.google.enable_drive
            )
            logger.info(f"üìä GoogleServicesManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (Drive: {'–≤–∫–ª—é—á–µ–Ω' if config.google.enable_drive else '–æ—Ç–∫–ª—é—á–µ–Ω'})")
            
            success = await google_manager.add_application_to_sheet(application_data)
            if success:
                logger.info("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ Google Sheets")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Google Sheets: {e}")
            if "quotaExceeded" in str(e):
                logger.error("üí° –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã Google Sheets API")
            elif "403" in str(e):
                logger.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets")
            elif "404" in str(e):
                logger.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets")
    else:
        logger.info("‚ÑπÔ∏è Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç")
    
    logger.info(f"üéâ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event_from_user.id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")


async def save_to_csv(application_data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª"""
    import csv
    logger.info(f"üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        backup_dir = "app/storage/backups"
        os.makedirs(backup_dir, exist_ok=True)
        logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {backup_dir} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞")
        
        csv_path = f"{backup_dir}/applications.csv"
        file_exists = os.path.exists(csv_path)
        
        logger.info(f"üìÑ –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É: {csv_path}")
        logger.info(f"üìÑ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_exists}")
        
        with open(csv_path, 'a', newline='', encoding='utf-8') as csvfile:
            fieldnames = [
                'timestamp', 'user_id', 'username', 'full_name', 'university', 
                'course', 'phone', 'email', 'how_found_kbk', 'department', 
                'position', 'experience', 'motivation', 'status', 
                'resume_local_path', 'resume_google_drive_url'
            ]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            
            if not file_exists:
                logger.info("üìã –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ CSV —Ñ–∞–π–ª–∞...")
                writer.writeheader()
            
            logger.info("üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ CSV...")
            writer.writerow(application_data)
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ CSV")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV: {e}")
        raise


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å dialogs.py
async def on_apply_clicked(callback: CallbackQuery, button, dialog_manager: DialogManager):
    """–ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    logger.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏")
    await dialog_manager.next()

async def on_full_name_input(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏"""
    full_name = message.text.strip()
    logger.info(f"üë§ –ü–æ–ª—É—á–µ–Ω–æ –§–ò–û: {full_name} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –§–ò–û –Ω–∞ —á–∞—Å—Ç–∏ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)
    name_parts = full_name.split()
    
    if len(name_parts) >= 1:
        surname = name_parts[0]  # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - —Ñ–∞–º–∏–ª–∏—è
        dialog_manager.dialog_data["surname"] = surname
        logger.info(f"   üìù –§–∞–º–∏–ª–∏—è: {surname}")
    else:
        dialog_manager.dialog_data["surname"] = "User"
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ–∞–º–∏–ª–∏—é –∏–∑: {full_name}")
    
    if len(name_parts) >= 2:
        name = name_parts[1]  # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å - –∏–º—è
        dialog_manager.dialog_data["name"] = name
        logger.info(f"   üìù –ò–º—è: {name}")
    else:
        dialog_manager.dialog_data["name"] = "Unknown"
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–∑: {full_name}")
    
    if len(name_parts) >= 3:
        patronymic = name_parts[2]  # –¢—Ä–µ—Ç—å—è —á–∞—Å—Ç—å - –æ—Ç—á–µ—Å—Ç–≤–æ
        dialog_manager.dialog_data["patronymic"] = patronymic
        logger.info(f"   üìù –û—Ç—á–µ—Å—Ç–≤–æ: {patronymic}")
    else:
        dialog_manager.dialog_data["patronymic"] = ""  # –û—Ç—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        logger.info(f"   üìù –û—Ç—á–µ—Å—Ç–≤–æ: –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
    dialog_manager.dialog_data["full_name"] = full_name
    
    logger.info(f"‚úÖ –§–ò–û —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await dialog_manager.next()

async def on_university_input(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞"""
    university = message.text.strip()
    logger.info(f"üè´ –ü–æ–ª—É—á–µ–Ω —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: {university} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    dialog_manager.dialog_data["university"] = university
    await dialog_manager.next()

async def on_phone_input(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    logger.info(f"üìû –ü–æ–ª—É—á–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: {phone} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if len(phone) >= 10:
        dialog_manager.dialog_data["phone"] = phone
        await dialog_manager.next()
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {phone}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä)")

async def on_email_input(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email"""
    email = message.text.strip()
    logger.info(f"üìß –ü–æ–ª—É—á–µ–Ω email: {email} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    if "@" in email and "." in email:
        dialog_manager.dialog_data["email"] = email
        await dialog_manager.next()
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {email}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")

async def on_course_selected(callback: CallbackQuery, widget, dialog_manager: DialogManager, item_id, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞"""
    logger.info(f"üìö –í—ã–±—Ä–∞–Ω –∫—É—Ä—Å: {item_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    dialog_manager.dialog_data["course"] = item_id
    await dialog_manager.next()

async def on_how_found_selected(callback: CallbackQuery, widget, dialog_manager: DialogManager, item_id, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —É–∑–Ω–∞–≤–∞–Ω–∏—è –æ –ö–ë–ö"""
    logger.info(f"üîç –í—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± —É–∑–Ω–∞–≤–∞–Ω–∏—è: {item_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    dialog_manager.dialog_data["how_found_kbk"] = item_id
    await dialog_manager.next()

async def on_department_selected(callback: CallbackQuery, widget, dialog_manager: DialogManager, item_id, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞"""
    logger.info(f"üè¢ –í—ã–±—Ä–∞–Ω –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {item_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    dialog_manager.dialog_data["selected_department"] = item_id
    await dialog_manager.next()

async def on_position_selected(callback: CallbackQuery, widget, dialog_manager: DialogManager, item_id, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    logger.info(f"üíº –í—ã–±—Ä–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: {item_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    dialog_manager.dialog_data["selected_position"] = item_id
    await dialog_manager.next()

async def on_experience_input(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø—ã—Ç–∞"""
    experience = message.text.strip()
    logger.info(f"üíº –ü–æ–ª—É—á–µ–Ω –æ–ø—ã—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {len(experience)} —Å–∏–º–≤–æ–ª–æ–≤")
    dialog_manager.dialog_data["experience"] = experience
    await dialog_manager.next()

async def on_motivation_input(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏"""
    motivation = message.text.strip()
    logger.info(f"üí≠ –ü–æ–ª—É—á–µ–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {len(motivation)} —Å–∏–º–≤–æ–ª–æ–≤")
    dialog_manager.dialog_data["motivation"] = motivation
    await dialog_manager.next()

async def on_resume_uploaded(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ"""
    logger.info(f"üìé –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—é–º–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await process_resume_file(message, widget, dialog_manager, **kwargs)
