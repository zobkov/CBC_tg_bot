from typing import Dict, Any

from aiogram.types import User
from aiogram_dialog import DialogManager

from config.config import Config
from app.infrastructure.database.database.db import DB


async def get_stage_info(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–ø–µ"""
    config: Config = dialog_manager.middleware_data.get("config")
    
    if not config:
        return {
            "stage_title": "–ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø",
            "stage_description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
            "can_apply": False,
            "application_status": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
        }
    
    stage_info = config.selection.stages["stage_1"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    event_from_user = dialog_manager.event.from_user
    db: DB = dialog_manager.middleware_data.get("db")
    
    can_apply = True
    application_status_text = ""
    
    try:
        if db:
            # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
            pass
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏: {e}")
    
    return {
        "stage_name": stage_info["name"],
        "stage_description": stage_info["description"],
        "can_apply": can_apply,
        "application_status_text": application_status_text
    }


async def get_how_found_options(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å '–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –ö–ë–ö'"""
    config: Config = dialog_manager.middleware_data.get("config")
    
    if not config:
        return {"how_found_options": [], "has_selections": False}
    
    options = []
    for i, option in enumerate(config.selection.how_found_options):
        options.append({"id": str(i), "text": option})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ Multiselect
    multiselect = dialog_manager.find("how_found_multiselect")
    has_selections = False
    was_in_kbk = False
    
    if multiselect:
        checked_items = multiselect.get_checked()
        has_selections = len(checked_items) > 0
        was_in_kbk = "6" in checked_items  # –ò–Ω–¥–µ–∫—Å –æ–ø—Ü–∏–∏ "–†–∞–Ω–µ–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ö–ë–ö (2024-2025)"
    
    return {
        "how_found_options": options,
        "has_selections": has_selections,
        "was_in_kbk": was_in_kbk
    }


async def get_departments_for_previous(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—á–∞—Å—Ç–∏—è"""
    config: Config = dialog_manager.middleware_data.get("config")
    
    if not config:
        return {"departments": [], "was_in_kbk": False, "departments_description": ""}
    
    departments = []
    descriptions = []
    
    for key, dept_info in config.selection.departments.items():
        departments.append({
            "id": key, 
            "text": dept_info["name"],
            "description": dept_info.get("description", "")
        })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        descriptions.append(f"<b>{dept_info['name']}</b>\n{dept_info.get('description', '')}")
    
    departments_description = "\n\n".join(descriptions)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–†–∞–Ω–µ–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ö–ë–ö" —á–µ—Ä–µ–∑ Multiselect
    multiselect = dialog_manager.find("how_found_multiselect")
    was_in_kbk = False
    
    if multiselect:
        checked_items = multiselect.get_checked()
        was_in_kbk = "6" in checked_items  # –ò–Ω–¥–µ–∫—Å –æ–ø—Ü–∏–∏ "–†–∞–Ω–µ–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ö–ë–ö (2024-2025)"
    
    return {
        "departments": departments,
        "was_in_kbk": was_in_kbk,
        "departments_description": departments_description
    }


async def get_departments(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤"""
    config: Config = dialog_manager.middleware_data.get("config")
    
    if not config:
        return {"departments": [], "departments_description": ""}
    
    departments = []
    descriptions = []
    
    for key, dept_info in config.selection.departments.items():
        departments.append({
            "id": key, 
            "text": dept_info["name"],
            "description": dept_info.get("description", "")
        })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        descriptions.append(f"<b>{dept_info['name']}</b>\n{dept_info.get('description', '')}")
    
    departments_description = "\n\n".join(descriptions)
    
    return {
        "departments": departments,
        "departments_description": departments_description
    }


async def get_positions_for_department(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞"""
    config: Config = dialog_manager.middleware_data.get("config")
    
    if not config:
        return {"positions": []}
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–¥–µ–ª –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
    dialog_data = dialog_manager.dialog_data
    selected_department = dialog_data.get("selected_department")
    
    positions = []
    department_name = ""
    
    if selected_department and selected_department in config.selection.departments:
        dept_info = config.selection.departments[selected_department]
        dept_positions = dept_info.get("positions", [])
        department_name = dept_info.get("name", "")
        
        for i, position in enumerate(dept_positions):
            positions.append({"id": str(i), "text": position})
    
    return {
        "positions": positions,
        "department_name": department_name
    }


async def get_course_options(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫—É—Ä—Å–æ–≤"""
    courses = []
    for i in range(1, 7):  # –∫—É—Ä—Å—ã 1-6
        courses.append({"id": str(i), "text": f"{i} –∫—É—Ä—Å"})
    
    return {"courses": courses}


async def get_form_summary(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã"""
    dialog_data = dialog_manager.dialog_data
    config: Config = dialog_manager.middleware_data.get("config")
    
    if not config:
        return {"summary": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"}
    
    # –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã "–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏" –∏–∑ Multiselect
    multiselect = dialog_manager.find("how_found_multiselect")
    how_found_selections = set()
    
    if multiselect:
        how_found_selections = set(multiselect.get_checked())
    else:
        # Fallback –∫ dialog_data –µ—Å–ª–∏ Multiselect –Ω–µ –Ω–∞–π–¥–µ–Ω
        how_found_selections = dialog_data.get("how_found_selections", set())
    
    how_found_texts = []
    for selection in how_found_selections:
        try:
            idx = int(selection)
            if idx < len(config.selection.how_found_options):
                how_found_texts.append(config.selection.how_found_options[idx])
        except (ValueError, IndexError):
            continue
    
    how_found_text = ", ".join(how_found_texts) if how_found_texts else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–¥–µ–ª–µ, –µ—Å–ª–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ö–ë–ö
    previous_dept_text = ""
    if "6" in how_found_selections:  # "–†–∞–Ω–µ–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ö–ë–ö"
        previous_dept_key = dialog_data.get("previous_department", "")
        if previous_dept_key and previous_dept_key in config.selection.departments:
            previous_dept_text = f"\nüè¢ <b>–ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–¥–µ–ª –≤ –ö–ë–ö:</b> {config.selection.departments[previous_dept_key]['name']}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    priorities_summary = ""
    priorities_exist = False
    
    for i in range(1, 4):
        dept_key = dialog_data.get(f"priority_{i}_department")
        pos_index = dialog_data.get(f"priority_{i}_position")
        
        if dept_key and pos_index is not None:
            priorities_exist = True
            dept_name = config.selection.departments.get(dept_key, {}).get("name", dept_key)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏–∑ –º–∞—Å—Å–∏–≤–∞
            positions_list = config.selection.departments.get(dept_key, {}).get("positions", [])
            try:
                pos_name = positions_list[int(pos_index)]
            except (IndexError, ValueError):
                pos_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è"
                
            priorities_summary += f"  {i}. {dept_name} - {pos_name}\n"
        else:
            priorities_summary += f"  {i}. –ù–µ –≤—ã–±—Ä–∞–Ω–æ\n"
    
    if not priorities_exist:
        priorities_summary = "‚ùå –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
    
    course = dialog_data.get("course", "1")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–∑—é–º–µ
    if "resume_file" in dialog_data:
        resume_filename = dialog_data.get("resume_file", "")
        resume_status = f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {resume_filename}"
    else:
        resume_status = "‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"
    
    return {
        "full_name": dialog_data.get("full_name", ""),
        "university": dialog_data.get("university", ""),
        "course_text": f"{course} –∫—É—Ä—Å",
        "phone": dialog_data.get("phone", ""),
        "email": dialog_data.get("email", ""),
        "how_found_text": how_found_text,
        "previous_dept_text": previous_dept_text,
        "priorities_summary": priorities_summary,
        "experience": dialog_data.get("experience", ""),
        "motivation": dialog_data.get("motivation", ""),
        "resume_status": resume_status
    }


async def get_edit_menu_data(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    dialog_data = dialog_manager.dialog_data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ö–ë–ö (–¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–¥–µ–ª–∞)
    selected_options = dialog_data.get("how_found_selections", set())
    was_in_kbk = "6" in selected_options
    
    return {
        "was_in_kbk": was_in_kbk,
        "full_name": dialog_data.get("full_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
        "university": dialog_data.get("university", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
        "course": dialog_data.get("course", "1"),
        "phone": dialog_data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
        "email": dialog_data.get("email", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
        "experience": dialog_data.get("experience", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")[:50] + "..." if len(dialog_data.get("experience", "")) > 50 else dialog_data.get("experience", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
        "motivation": dialog_data.get("motivation", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")[:50] + "..." if len(dialog_data.get("motivation", "")) > 50 else dialog_data.get("motivation", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    }


async def get_edit_how_found_options(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å '–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –ö–ë–ö' –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    config: Config = dialog_manager.middleware_data.get("config")
    
    if not config:
        return {"how_found_options": [], "has_selections": False}
    
    options = []
    for i, option in enumerate(config.selection.how_found_options):
        options.append({"id": str(i), "text": option})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±–æ—Ä—ã –¥–ª—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏
    dialog_data = dialog_manager.dialog_data
    selected_options = dialog_data.get("how_found_selections", set())
    has_selections = len(selected_options) > 0
    
    return {
        "how_found_options": options,
        "has_selections": has_selections
    }
