"""
Handlers for interview dialog - business logic
"""
import asyncio
from datetime import date
from typing import Any

from aiogram.types import CallbackQuery
from aiogram_dialog import DialogManager, ShowMode
from aiogram_dialog.widgets.kbd import Button

from app.infrastructure.database.dao.interview import InterviewDAO
from app.services.interview_google_sync import InterviewGoogleSheetsSync
from app.bot.states.interview import InterviewSG


async def on_date_selected(
    callback: CallbackQuery,
    button: Button,
    manager: DialogManager,
    item_id: str,
    **kwargs
):
    """Handle date selection"""
    await callback.answer()
    
    # Store selected date in dialog data
    manager.dialog_data["selected_date"] = item_id
    
    # Switch to time selection state
    await manager.switch_to(InterviewSG.time_selection)


async def on_timeslot_selected(
    callback: CallbackQuery,
    button: Button,
    manager: DialogManager,
    item_id: str,
    **kwargs
):
    """Handle timeslot selection"""
    await callback.answer()
    
    user_id = callback.from_user.id
    dao = InterviewDAO(manager.middleware_data["db_applications"], manager.middleware_data["config"])
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ
        timeslot_info = await dao.get_timeslot_by_id(int(item_id))
        
        if not timeslot_info:
            # –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"Timeslot {item_id} not found for user {user_id}")
            
            await callback.message.answer(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫—Ç–æ-—Ç–æ —É–∂–µ –∑–∞–Ω—è–ª —ç—Ç–æ –≤—Ä–µ–º—è. –í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥—Ä—É–≥–æ–µ."
            )
            await manager.switch_to(InterviewSG.date_selection)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–ª–æ—Ç –∏ –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –æ–Ω
        if not timeslot_info.get("is_available") or timeslot_info.get("reserved_by") is not None:
            # –°–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç
            import logging
            logger = logging.getLogger(__name__)
            logger.warning(
                f"Race condition detected: user {user_id} tried to select already occupied timeslot {item_id}. "
                f"Slot info: is_available={timeslot_info.get('is_available')}, "
                f"reserved_by={timeslot_info.get('reserved_by')}"
            )
            
            await callback.message.answer(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫—Ç–æ-—Ç–æ —É–∂–µ –∑–∞–Ω—è–ª —ç—Ç–æ –≤—Ä–µ–º—è. –í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥—Ä—É–≥–æ–µ."
            )
            await manager.switch_to(InterviewSG.date_selection)
            return
        
        # –°–ª–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        manager.dialog_data["selected_timeslot_id"] = item_id
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await manager.switch_to(InterviewSG.confirmation)
        
    except Exception as e:
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–æ—Ç–∞
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"Error checking timeslot {item_id} for user {user_id}: {e}")
        
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        await manager.switch_to(InterviewSG.date_selection)


async def on_confirm_booking(
    callback: CallbackQuery,
    button: Button,
    manager: DialogManager,
    **kwargs
):
    """Handle booking confirmation"""
    await callback.answer()
    
    user_id = callback.from_user.id
    timeslot_id = manager.dialog_data.get("selected_timeslot_id")
    
    if not timeslot_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç")
        return
    
    dao = InterviewDAO(manager.middleware_data["db_applications"], manager.middleware_data["config"])
    
    try:
        # Get timeslot info before booking
        timeslot_info = await dao.get_timeslot_by_id(int(timeslot_id))
        if not timeslot_info:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        success = await dao.book_timeslot(user_id, int(timeslot_id))
        
        if success:
            # Sync with Google Sheets in background
            try:
                sync_service = InterviewGoogleSheetsSync(dao)
                asyncio.create_task(sync_service.sync_single_timeslot_change(
                    department_number=timeslot_info["department_number"],
                    slot_date=timeslot_info["interview_date"],
                    slot_time=timeslot_info["start_time"],
                    user_id=user_id
                ))
            except Exception as e:
                print(f"Warning: Google Sheets sync failed: {e}")
            
            # Clear dialog data
            manager.dialog_data.clear()
            await manager.switch_to(InterviewSG.success)
        else:
            await callback.message.answer(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è ü´∂"
            )
            # Go back to date selection
            await manager.switch_to(InterviewSG.date_selection)
            
    except Exception as e:
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        # Log the error
        print(f"Error booking timeslot: {e}")


async def on_cancel_booking(
    callback: CallbackQuery,
    button: Button,
    manager: DialogManager,
    **kwargs
):
    """Handle booking cancellation (go back to date selection)"""
    await callback.answer()
    
    # Clear selected timeslot
    manager.dialog_data.pop("selected_timeslot_id", None)
    
    # Go back to time selection
    await manager.switch_to(InterviewSG.time_selection)


async def on_back_to_dates(
    callback: CallbackQuery,
    button: Button,
    manager: DialogManager,
    **kwargs
):
    """Handle going back to date selection"""
    await callback.answer()
    
    # Clear selected date and timeslot
    manager.dialog_data.pop("selected_date", None)
    manager.dialog_data.pop("selected_timeslot_id", None)
    
    await manager.switch_to(InterviewSG.date_selection)


async def on_reschedule_request(
    callback: CallbackQuery,
    button: Button,
    manager: DialogManager,
    **kwargs
):
    """Handle reschedule request"""
    await callback.answer()
    
    await manager.switch_to(InterviewSG.reschedule_date_selection)


async def on_reschedule_date_selected(
    callback: CallbackQuery,
    button: Button,
    manager: DialogManager,
    item_id: str,
    **kwargs
):
    """Handle date selection in reschedule flow"""
    await callback.answer()
    
    # Store selected date in dialog data
    manager.dialog_data["reschedule_date"] = item_id
    
    # Switch to reschedule time selection state
    await manager.switch_to(InterviewSG.reschedule_time_selection)


async def on_reschedule_timeslot_selected(
    callback: CallbackQuery,
    button: Button,
    manager: DialogManager,
    item_id: str,
    **kwargs
):
    """Handle timeslot selection in reschedule flow"""
    await callback.answer()
    
    user_id = callback.from_user.id
    dao = InterviewDAO(manager.middleware_data["db_applications"], manager.middleware_data["config"])
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ
        timeslot_info = await dao.get_timeslot_by_id(int(item_id))
        
        if not timeslot_info:
            # –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"Reschedule: Timeslot {item_id} not found for user {user_id}")
            
            await callback.message.answer(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫—Ç–æ-—Ç–æ —É–∂–µ –∑–∞–Ω—è–ª —ç—Ç–æ –≤—Ä–µ–º—è. –í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥—Ä—É–≥–æ–µ."
            )
            await manager.switch_to(InterviewSG.reschedule_date_selection)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–ª–æ—Ç –∏ –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –æ–Ω
        if not timeslot_info.get("is_available") or timeslot_info.get("reserved_by") is not None:
            # –°–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç
            import logging
            logger = logging.getLogger(__name__)
            logger.warning(
                f"Reschedule race condition detected: user {user_id} tried to select already occupied timeslot {item_id}. "
                f"Slot info: is_available={timeslot_info.get('is_available')}, "
                f"reserved_by={timeslot_info.get('reserved_by')}"
            )
            
            await callback.message.answer(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫—Ç–æ-—Ç–æ —É–∂–µ –∑–∞–Ω—è–ª —ç—Ç–æ –≤—Ä–µ–º—è. –í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥—Ä—É–≥–æ–µ."
            )
            await manager.switch_to(InterviewSG.reschedule_date_selection)
            return
        
        # –°–ª–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        manager.dialog_data["reschedule_timeslot_id"] = item_id
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø–µ—Ä–µ–Ω–æ—Å–∞
        await manager.switch_to(InterviewSG.reschedule_confirmation)
        
    except Exception as e:
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–æ—Ç–∞
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"Error checking reschedule timeslot {item_id} for user {user_id}: {e}")
        
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        await manager.switch_to(InterviewSG.reschedule_date_selection)


async def on_confirm_reschedule(
    callback: CallbackQuery,
    button: Button,
    manager: DialogManager,
    **kwargs
):
    """Handle reschedule confirmation"""
    await callback.answer()
    
    user_id = callback.from_user.id
    new_timeslot_id = manager.dialog_data.get("reschedule_timeslot_id")
    
    if not new_timeslot_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç")
        return
    
    dao = InterviewDAO(manager.middleware_data["db_applications"], manager.middleware_data["config"])
    
    try:
        # Get old booking info before rescheduling for sync
        old_booking = await dao.get_user_current_booking(user_id)
        
        # Get new timeslot info before booking
        new_timeslot_info = await dao.get_timeslot_by_id(int(new_timeslot_id))
        if not new_timeslot_info:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        success = await dao.book_timeslot(user_id, int(new_timeslot_id))
        
        if success:
            # Sync with Google Sheets in background
            try:
                sync_service = InterviewGoogleSheetsSync(dao)
                
                # Sync old booking removal (if exists)
                if old_booking:
                    asyncio.create_task(sync_service.sync_single_timeslot_change(
                        department_number=old_booking["department_number"],
                        slot_date=old_booking["interview_date"],
                        slot_time=old_booking["start_time"],
                        user_id=None  # None means remove booking
                    ))
                
                # Sync new booking
                asyncio.create_task(sync_service.sync_single_timeslot_change(
                    department_number=new_timeslot_info["department_number"],
                    slot_date=new_timeslot_info["interview_date"],
                    slot_time=new_timeslot_info["start_time"],
                    user_id=user_id
                ))
            except Exception as e:
                print(f"Warning: Google Sheets sync failed during reschedule: {e}")
            
            # Clear dialog data
            manager.dialog_data.clear()
            await callback.message.answer(
                "‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ! "
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
            )
            await manager.switch_to(InterviewSG.main_menu)
        else:
            await callback.message.answer(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è ü´∂."
            )
            # Go back to reschedule date selection
            await manager.switch_to(InterviewSG.reschedule_date_selection)
            
    except Exception as e:
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        # Log the error
        print(f"Error rescheduling timeslot: {e}")


async def on_cancel_reschedule(
    callback: CallbackQuery,
    button: Button,
    manager: DialogManager,
    **kwargs
):
    """Handle reschedule cancellation"""
    await callback.answer()
    
    # Clear reschedule data
    manager.dialog_data.pop("reschedule_date", None)
    manager.dialog_data.pop("reschedule_timeslot_id", None)
    
    # Go back to main menu
    await manager.switch_to(InterviewSG.main_menu)


async def on_cancel_interview_request(
    callback: CallbackQuery,
    button: Button,
    manager: DialogManager,
    **kwargs
):
    """Handle cancel interview request"""
    await callback.answer()
    
    await manager.switch_to(InterviewSG.cancel_confirmation)


async def on_confirm_cancel_interview(
    callback: CallbackQuery,
    button: Button,
    manager: DialogManager,
    **kwargs
):
    """Handle cancel interview confirmation"""
    await callback.answer()
    
    user_id = callback.from_user.id
    dao = InterviewDAO(manager.middleware_data["db_applications"], manager.middleware_data["config"])
    
    try:
        # Get current booking info before cancellation for sync
        current_booking = await dao.get_user_current_booking(user_id)
        
        success = await dao.cancel_user_booking(user_id)
        
        if success:
            # Sync with Google Sheets in background
            try:
                sync_service = InterviewGoogleSheetsSync(dao)
                
                # Sync booking removal (if booking exists)
                if current_booking:
                    asyncio.create_task(sync_service.sync_single_timeslot_change(
                        department_number=current_booking["department_number"],
                        slot_date=current_booking["interview_date"],
                        slot_time=current_booking["start_time"],
                        user_id=None  # None means remove booking
                    ))
            except Exception as e:
                print(f"Warning: Google Sheets sync failed during cancellation: {e}")
            
            await callback.message.answer(
                "‚úÖ <b>–ó–∞–ø–∏—Å—å –Ω–∞ –æ–Ω–ª–∞–π–Ω-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–∞</b> \n\n–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ ‚Äî —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ!"
            )
            await manager.switch_to(InterviewSG.main_menu, show_mode=ShowMode.DELETE_AND_SEND)
        else:
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            await manager.switch_to(InterviewSG.main_menu, show_mode=ShowMode.DELETE_AND_SEND)
            
    except Exception as e:
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        print(f"Error cancelling interview: {e}")
        await manager.switch_to(InterviewSG.main_menu,show_mode=ShowMode.DELETE_AND_SEND)


async def on_cancel_interview_cancellation(
    callback: CallbackQuery,
    button: Button,
    manager: DialogManager,
    **kwargs
):
    """Handle cancellation of interview cancellation (go back to main menu)"""
    await callback.answer()
    
    # Go back to main menu
    await manager.switch_to(InterviewSG.main_menu)