from datetime import datetime
from typing import Dict, Any

from aiogram.types import User
from aiogram_dialog import DialogManager
from aiogram_dialog.api.entities import MediaAttachment, MediaId
from aiogram.enums import ContentType

from config.config import Config
from app.infrastructure.database.database.db import DB
from app.utils.optimized_dialog_widgets import get_file_id_for_path


async def get_user_info(dialog_manager: DialogManager, event_from_user: User, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    
    return {
        "user_id": event_from_user.id,
        "username": event_from_user.username or "",
        "first_name": event_from_user.first_name or "",
        "last_name": event_from_user.last_name or "",
    }


async def get_current_stage_info(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ –æ—Ç–±–æ—Ä–∞"""
    from app.utils.deadline_checker import is_task_submission_closed, format_results_date
    
    config: Config = dialog_manager.middleware_data.get("config")
    db: DB = dialog_manager.middleware_data.get("db")
    event_from_user: User = dialog_manager.event.from_user
    
    if not config:
        return {
            "current_stage": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "current_stage_description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
            "is_active": False
        }
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users (submission_status)
    application_submitted = False
    try:
        if db:
            user_record = await db.users.get_user_record(user_id=event_from_user.id)
            application_submitted = bool(user_record and user_record.submission_status == "submitted")
    except Exception:
        application_submitted = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä—ã—Ç–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    submission_closed = is_task_submission_closed()
    
    now = datetime.now()
    current_stage = None
    current_stage_info = None
    next_stage_info = None
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç—Ç–∞–ø—ã –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞
    sorted_stages = sorted(
        config.selection.stages.items(),
        key=lambda x: datetime.fromisoformat(x[1]["start_date"])
    )
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
    for i, (stage_key, stage_data) in enumerate(sorted_stages):
        start_date = datetime.fromisoformat(stage_data["start_date"])
        end_date = datetime.fromisoformat(stage_data["end_date"])
        
        if start_date <= now <= end_date:
            current_stage = stage_key
            current_stage_info = stage_data
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
            if i + 1 < len(sorted_stages):
                next_stage_info = sorted_stages[i + 1][1]
            break
    
    if not current_stage:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—É–¥—É—â–∏–µ —ç—Ç–∞–ø—ã
        for stage_key, stage_data in sorted_stages:
            start_date = datetime.fromisoformat(stage_data["start_date"])
            if now < start_date:
                current_stage = stage_key
                current_stage_info = stage_data
                current_stage_info["status"] = "upcoming"
                break
    
    if not current_stage_info:
        current_stage_info = {
            "name": "–û—Ç–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω",
            "description": "–í—Å–µ —ç—Ç–∞–ø—ã –æ—Ç–±–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã",
            "status": "completed"
        }
    
    # –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    deadline_info = ""
    
    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∑–∞–∫—Ä—ã—Ç–∞, –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç—Ç–∞–ø–µ
    if submission_closed:
        current_stage_info = {
            "name": "–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
            "description": "",
            "status": "closed"
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        results_date = format_results_date()
        deadline_info = f"\n\n‚è∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b> {results_date}"
    else:
        # –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω (–¥–ª—è —ç—Ç–∞–ø–∞ "–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
        if current_stage_info and current_stage_info.get("name") == "–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ":
            deadline_info = f"\n\n‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> 02.10.2025, 23:59"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ
    next_stage_text = ""
    #if next_stage_info and current_stage_info.get("status") != "upcoming":
     #   next_start = datetime.fromisoformat(next_stage_info["start_date"])
    #    next_stage_text = f"\n\nüìã <b>–°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø:</b> {next_stage_info['name']}\nüöÄ <b>–ù–∞—á–∞–ª–æ:</b> {next_start.strftime('%d.%m.%Y, %H:%M')}"
    
    return {
        "current_stage": current_stage or "completed",
        "stage_name": current_stage_info["name"],
        "stage_description": current_stage_info.get("description", "") + next_stage_text,
        "stage_status": current_stage_info.get("status", "active"),
        "deadline_info": deadline_info,
        "submission_closed": submission_closed
    }


async def get_application_status(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    event_from_user: User = dialog_manager.event.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç DB –∏–∑ middleware_data
    db: DB = dialog_manager.middleware_data.get("db")
    
    if not db:
        return {
            "application_status": "not_submitted",
            "status_text": "–ó–∞—è–≤–∫–∞ –Ω–µ –ø–æ–¥–∞–Ω–∞",
            "can_apply": True
        }
    
    try:
        # Ensure application row exists for form fields (no status stored here)
        await db.applications.create_application(user_id=event_from_user.id)
        user_record = await db.users.get_user_record(user_id=event_from_user.id)
        application_status = (user_record.submission_status if user_record else "not_submitted")
        status_text = {
            "not_submitted": "–ó–∞—è–≤–∫–∞ –Ω–µ –ø–æ–¥–∞–Ω–∞",
            "submitted": "–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞"
        }.get(application_status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        application_status = "not_submitted"
        status_text = "–ó–∞—è–≤–∫–∞ –Ω–µ –ø–æ–¥–∞–Ω–∞"
    
    return {
        "application_status": application_status,
        "status_text": status_text,
        "can_apply": application_status == "not_submitted"
    }


async def get_support_contacts(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    config: Config = dialog_manager.middleware_data.get("config")
    
    if not config:
        return {
            "general_support": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            "technical_support": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            "hr_support": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        }
    
    return {
        "general_support": config.selection.support_contacts["general"],
        "technical_support": config.selection.support_contacts["technical"],
        "hr_support": config.selection.support_contacts["hr"]
    }


async def get_task_button_info(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
    from app.utils.deadline_checker import is_task_submission_closed
    
    event_from_user: User = dialog_manager.event.from_user
    db: DB = dialog_manager.middleware_data.get("db")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä—ã—Ç–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    submission_closed = is_task_submission_closed()
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω (–¥–ª—è —Å–ª—É—á–∞–µ–≤ –æ—à–∏–±–æ–∫ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö)
    is_first_stage_passed = True
    button_emoji = "üìã"
    
    if submission_closed:
        # –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –ø—Ä–æ—à–µ–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–º–æ—á–µ–∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        button_emoji = "üîí"
    elif db:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            evaluation = await db.evaluated_applications.get_evaluation(user_id=event_from_user.id)
            
            if evaluation:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø
                # –ï—Å–ª–∏ –≤—Å–µ accepted_1, accepted_2, accepted_3 = False, –∑–Ω–∞—á–∏—Ç –Ω–µ –ø—Ä–æ—à–µ–ª
                is_first_stage_passed = evaluation.accepted_1 or evaluation.accepted_2 or evaluation.accepted_3
                
                if not is_first_stage_passed:
                    button_emoji = "üîí"
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ evaluated_applications, –∑–Ω–∞—á–∏—Ç –æ–Ω –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∑–∞—è–≤–∫—É
                button_emoji = "üîí"
                is_first_stage_passed = False
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"Error checking first stage status for user {event_from_user.id}: {e}")
    
    return {
        "task_button_emoji": button_emoji,
        "is_first_stage_passed": is_first_stage_passed,
        "submission_closed": submission_closed
    }


async def get_task_status_info(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
    event_from_user: User = dialog_manager.event.from_user
    db: DB = dialog_manager.middleware_data.get("db")
    
    task_status_text = "–†–µ—à–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã"
    
    if db:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –æ—Ü–µ–Ω–∫–µ
            user_record = await db.users.get_user_record(user_id=event_from_user.id)
            evaluation = await db.evaluated_applications.get_evaluation(user_id=event_from_user.id)
            
            if user_record and evaluation:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ –∫–∞–∫–∏–º –∑–∞–¥–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –ø—Ä–∏–Ω—è—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ —Ä–µ—à–µ–Ω–∏—è
                submitted_tasks = []
                
                if evaluation.accepted_1 and user_record.task_1_submitted:
                    submitted_tasks.append("1")
                elif evaluation.accepted_1:
                    # –ü—Ä–∏–Ω—è—Ç, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª
                    pass
                    
                if evaluation.accepted_2 and user_record.task_2_submitted:
                    submitted_tasks.append("2")
                elif evaluation.accepted_2:
                    # –ü—Ä–∏–Ω—è—Ç, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª
                    pass
                    
                if evaluation.accepted_3 and user_record.task_3_submitted:
                    submitted_tasks.append("3")
                elif evaluation.accepted_3:
                    # –ü—Ä–∏–Ω—è—Ç, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª
                    pass
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç
                if submitted_tasks:
                    task_status_text = "–†–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã"
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø—Ä–∏–Ω—è—Ç —Ö–æ—Ç—è –±—ã –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–¥–∞–Ω–∏—é
                    accepted_any = evaluation.accepted_1 or evaluation.accepted_2 or evaluation.accepted_3
                    if accepted_any:
                        task_status_text = "–†–µ—à–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã"
                    else:
                        # –ù–µ –ø—Ä–∏–Ω—è—Ç –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–¥–∞–Ω–∏—é
                        task_status_text = "–†–µ—à–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã"
            
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"Error getting task status for user {event_from_user.id}: {e}")
    
    return {
        "task_status_text": task_status_text
    }


async def get_main_menu_media(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    file_id = get_file_id_for_path("main_menu/main_menu.jpg")
    
    if file_id:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        media = MediaAttachment(
            type=ContentType.PHOTO,
            file_id=MediaId(file_id)
        )
    else:
        # Fallback –Ω–∞ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        media = MediaAttachment(
            type=ContentType.PHOTO,
            path="app/bot/assets/images/main_menu/main_menu.jpg"
        )
    
    return {
        "media": media
    }
