import logging
from typing import Any

from aiogram.types import CallbackQuery, Message

from better_profanity import profanity

from aiogram_dialog import DialogManager, ShowMode
from aiogram_dialog.widgets.kbd import Button, Select

from .questions import QUESTIONS
from .states import QuizDodSG

logger = logging.getLogger(__name__)


# Input error handlers

async def name_error_handler(
        message: Message,
        dialog_: Any,
        manager: DialogManager,
        error_: ValueError
):
    message.answer(f"{error_}")

async def phone_error_handler(
        message: Message,
        dialog_: Any,
        manager: DialogManager,
        error_: ValueError
):
    message.answer(f"{error_}")

async def email_error_handler(
        message: Message,
        dialog_: Any,
        manager: DialogManager,
        error_: ValueError
):
    message.answer(f"{error_}")

# Type factory

def name_check(value: str) -> str:
    profanity.load_censor_words()
    name = value.strip()

    logger.debug(f"Profanity is in name: {profanity.censor(name)}")

    if not name:
        raise ValueError("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    if len(name) < 2:
        raise ValueError("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
    if profanity.contains_profanity(name):
        raise ValueError("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π!")
    return name

def email_check(value: str) -> str:
    import re
    email = value.strip().lower()
    
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if not re.match(pattern, email):
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
    
    return email

def phone_check(value: str) -> str:
    import re
    phone = re.sub(r'[^\d+]', '', value)  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –±–µ–∑ +, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
    if not phone.startswith('+'):
        if phone.startswith('8'):
            phone = '+7' + phone[1:]  # –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç 8XXXXXXXXXX
        elif phone.startswith('7'):
            phone = '+' + phone       # –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç 7XXXXXXXXXX
        elif len(phone) == 10:
            phone = '+7' + phone      # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä –±–µ–∑ –∫–æ–¥–∞
        else:
            phone = '+' + phone       # –î–æ–±–∞–≤–ª—è–µ–º + –∫ –ª—é–±–æ–º—É –¥—Ä—É–≥–æ–º—É –Ω–æ–º–µ—Ä—É
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç: + –∏ –º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä
    if not re.match(r'^\+\d{10,15}$', phone):
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: +7XXXXXXXXXX, +1XXXXXXXXXX, +86XXXXXXXXXXX")
    
    return phone


def _reset_quiz_progress(manager: DialogManager) -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–∏–∑–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º."""
    manager.dialog_data["quiz_dod_question_index"] = 0
    manager.dialog_data["quiz_dod_correct_answers"] = 0
    manager.dialog_data["quiz_dod_best_updated"] = False


async def mock_save_quiz_result(user_id: int, score: int) -> None:
    """–ú–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–≤–∏–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("[QUIZ_DOD][MOCK] Save result user=%s score=%s", user_id, score)


async def on_quiz_start(
    callback: CallbackQuery,
    button: Button,
    dialog_manager: DialogManager,
    **kwargs,
):
    await callback.answer()
    _reset_quiz_progress(dialog_manager)
    dialog_manager.dialog_data["quiz_dod_last_score"] = 0
    await dialog_manager.switch_to(QuizDodSG.name)


async def on_name_entered(
    message: Message,
    widget,
    dialog_manager: DialogManager,
    value: str,
    **kwargs,
):
    dialog_manager.dialog_data["quiz_dod_name"] = value
    await dialog_manager.next()


async def on_phone_entered(
    message: Message,
    widget,
    dialog_manager: DialogManager,
    value: str,
    **kwargs,
):
    dialog_manager.dialog_data["quiz_dod_phone"] = value
    await dialog_manager.next()


async def on_email_entered(
    message: Message,
    widget,
    dialog_manager: DialogManager,
    value: str,
    **kwargs,
):
    dialog_manager.dialog_data["quiz_dod_email"] = value
    dialog_manager.dialog_data["quiz_dod_last_score"] = 0
    _reset_quiz_progress(dialog_manager)
    await dialog_manager.switch_to(
        QuizDodSG.QUESTIONS,
        show_mode=ShowMode.DELETE_AND_SEND,
    )


async def on_quiz_answer_selected(
    callback: CallbackQuery,
    widget: Select,
    dialog_manager: DialogManager,
    item_id: str,
    **kwargs,
):
    await callback.answer()

    dialog_data = dialog_manager.dialog_data
    question_index = dialog_data.get("quiz_dod_question_index", 0)
    selected_option = int(item_id)

    if question_index < len(QUESTIONS):
        question = QUESTIONS[question_index]
        if selected_option == question.correct:
            dialog_data["quiz_dod_correct_answers"] = dialog_data.get("quiz_dod_correct_answers", 0) + 1

    dialog_data["quiz_dod_question_index"] = question_index + 1

    if dialog_data["quiz_dod_question_index"] >= len(QUESTIONS):
        score = dialog_data.get("quiz_dod_correct_answers", 0)
        dialog_data["quiz_dod_last_score"] = score

        previous_best = dialog_data.get("quiz_dod_score")
        if previous_best is None or score > previous_best:
            dialog_data["quiz_dod_score"] = score
            dialog_data["quiz_dod_best_updated"] = True
        else:
            dialog_data["quiz_dod_best_updated"] = False

        await mock_save_quiz_result(callback.from_user.id, score)

        await callback.message.answer("""–ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º —Ç–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚ù§Ô∏è 

–í –∑–Ω–∞–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è —Ç–µ–±—è –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–¥–∞—Ä–æ–∫ ‚Äì —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å –Ω–∞—à–∏–º –º–∞—Å–∫–æ—Ç–æ–º 

–ù–∏–∂–µ ‚Äì –æ–¥–∏–Ω –∏–∑ —Å—Ç–∏–∫–µ—Ä–æ–≤. –°–æ—Ö—Ä–∞–Ω—è–π —Å–∫–æ—Ä–µ–π –∏ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –≤ —á–∞—Ç–∞—Ö –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö ‚Äì –ø—É—Å—Ç—å –≤—Å–µ –∑–Ω–∞—é—Ç, —á—Ç–æ —Ç—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ö–ë–ö üí™üèª""")

        await callback.message.answer_sticker('CAACAgIAAxkBAAETmC9pBlc9BAjTquUvcGJ0a04ZH4g6dAACwGoAAkEIMElCkBSwcWM0rDYE')

        await dialog_manager.switch_to(
            QuizDodSG.RESULTS,
            show_mode=ShowMode.DELETE_AND_SEND,
        )
        return

    await dialog_manager.switch_to(
        QuizDodSG.QUESTIONS,
        show_mode=ShowMode.DELETE_AND_SEND,
    )


async def on_quiz_restart(
    callback: CallbackQuery,
    button: Button,
    dialog_manager: DialogManager,
    **kwargs,
):
    await callback.answer()
    _reset_quiz_progress(dialog_manager)
    dialog_manager.dialog_data["quiz_dod_last_score"] = 0
    await dialog_manager.switch_to(
        QuizDodSG.QUESTIONS,
        show_mode=ShowMode.DELETE_AND_SEND,
    )