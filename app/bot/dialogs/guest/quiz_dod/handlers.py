import asyncio
import logging
from typing import Any

from aiogram.types import CallbackQuery, Message, FSInputFile

from aiogram_dialog import DialogManager, ShowMode
from aiogram_dialog.widgets.kbd import Button, Select

from app.infrastructure.database.database.db import DB
from app.utils.certificate_gen import (
    CertificateGenerationError,
    get_certificate_generator,
)
from better_profanity import profanity
from .questions import QUESTIONS
from .states import QuizDodSG
from .profanity_list import RUSSIAN_PROFANITY

logger = logging.getLogger(__name__)

_PROFANITY_LOADED = False
_CERTIFICATE_GENERATOR = get_certificate_generator()


def _ensure_profanity_loaded() -> None:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑."""
    global _PROFANITY_LOADED
    if _PROFANITY_LOADED:
        return

    profanity.load_censor_words()
    profanity.add_censor_words(RUSSIAN_PROFANITY)
    _PROFANITY_LOADED = True


# Input error handlers

async def name_error_handler(
        message: Message,
        dialog_: Any,
        manager: DialogManager,
        error_: ValueError
):
    logger.debug(f"Wrong name. Error: {error_}")

async def phone_error_handler(
        message: Message,
        dialog_: Any,
        manager: DialogManager,
        error_: ValueError
):
    message.answer(f"{error_}")

async def email_error_handler(
        message: Message,
        dialog_: Any,
        manager: DialogManager,
        error_: ValueError
):
    message.answer(f"{error_}")

async def education_error_handler(
    message: Message,
    dialog_: Any,
    manager: DialogManager,
    error_: ValueError
):
    message.answer(f"{error_}")

# Type factory

def name_check(value: str) -> str:
    _ensure_profanity_loaded()
    name = value.strip()

    logger.debug(f"Profanity is in name: {profanity.censor(name)}")

    if not name:
        raise ValueError("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    if len(name) < 2:
        raise ValueError("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
    if profanity.contains_profanity(name):
        raise ValueError("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π!")
    return name

def email_check(value: str) -> str:
    import re
    email = value.strip().lower()
    
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if not re.match(pattern, email):
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
    
    return email

def phone_check(value: str) -> str:
    import re
    phone = re.sub(r'[^\d+]', '', value)  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –±–µ–∑ +, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
    if not phone.startswith('+'):
        if phone.startswith('8'):
            phone = '+7' + phone[1:]  # –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç 8XXXXXXXXXX
        elif phone.startswith('7'):
            phone = '+' + phone       # –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç 7XXXXXXXXXX
        elif len(phone) == 10:
            phone = '+7' + phone      # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä –±–µ–∑ –∫–æ–¥–∞
        else:
            phone = '+' + phone       # –î–æ–±–∞–≤–ª—è–µ–º + –∫ –ª—é–±–æ–º—É –¥—Ä—É–≥–æ–º—É –Ω–æ–º–µ—Ä—É
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç: + –∏ –º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä
    if not re.match(r'^\+\d{10,15}$', phone):
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: +7XXXXXXXXXX, +1XXXXXXXXXX, +86XXXXXXXXXXX")
    
    return phone


def education_check(value: str) -> str:
    education = value.strip()

    if not education:
        raise ValueError("–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –∏ –∫—É—Ä—Å –∏–ª–∏ –∫–ª–∞—Å—Å.")

    if len(education) < 3:
        raise ValueError("–£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏ –∫–ª–∞—Å—Å/–∫—É—Ä—Å.")

    return education


def _reset_quiz_progress(manager: DialogManager) -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–∏–∑–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º."""
    manager.dialog_data["quiz_dod_question_index"] = 0
    manager.dialog_data["quiz_dod_correct_answers"] = 0
    manager.dialog_data["quiz_dod_best_updated"] = False


async def _send_quiz_certificate(message: Message, dialog_manager: DialogManager) -> bool:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    full_name = dialog_manager.dialog_data.get("quiz_dod_name")
    if not full_name:
        logger.warning("[QUIZ_DOD] Skip certificate generation: name missing in dialog data")
        await message.answer(
            "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
        )
        return False

    loop = asyncio.get_running_loop()
    try:
        certificate_path = await loop.run_in_executor(
            None,
            _CERTIFICATE_GENERATOR.generate,
            full_name,
        )
    except CertificateGenerationError as exc:
        logger.exception("[QUIZ_DOD] Failed to generate certificate for name=%s", full_name)
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–≤–∏–∑–∞ üôà",
        )
        await message.answer(
            "–°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n" f"{exc}",
        )
        return False

    success = False
    try:
        await message.answer_document(
            document=FSInputFile(certificate_path),
            caption="–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–≤–∏–∑–∞! üéâ",
        )
        success = True
    except Exception:  # noqa: BLE001 - –≤–∞–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –æ—à–∏–±–∫—É
        logger.exception("[QUIZ_DOD] Failed to send certificate %s", certificate_path)
        await message.answer(
            "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—É—Ç—å –ø–æ–∑–∂–µ.",
        )
    finally:
        try:
            certificate_path.unlink(missing_ok=True)
        except OSError:
            logger.warning(
                "[QUIZ_DOD] Unable to remove temporary certificate file %s",
                certificate_path,
            )

    return success


async def save_quiz_result(dialog_manager: DialogManager, user_id: int, score: int) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–≤–∏–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    db: DB | None = dialog_manager.middleware_data.get("db")
    if not db:
        logger.warning("[QUIZ_DOD] Database unavailable; skip saving for user=%s", user_id)
        return

    try:
        await db.quiz_dod.upsert_best_result(user_id=user_id, quiz_result=score)
        logger.info("[QUIZ_DOD] Save result user=%s score=%s", user_id, score)
    except Exception:
        logger.exception("[QUIZ_DOD] Failed to save quiz result user=%s score=%s", user_id, score)


async def save_user_info(
    dialog_manager: DialogManager,
    user_id: int,
    *,
    full_name: str,
    phone: str,
    email: str,
    education: str,
) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–∏–Ω–∏-–∞–Ω–∫–µ—Ç—ã."""
    db: DB | None = dialog_manager.middleware_data.get("db")
    if not db:
        logger.warning("[QUIZ_DOD] Database unavailable; skip saving user info for user=%s", user_id)
        return

    try:
        await db.quiz_dod_users_info.upsert_user_info(
            user_id=user_id,
            full_name=full_name,
            phone=phone,
            email=email,
            education=education,
        )
        logger.info("[QUIZ_DOD] Saved user info user=%s", user_id)
    except Exception:
        logger.exception("[QUIZ_DOD] Failed to save user info user=%s", user_id)


async def on_certificate_requested(
    callback: CallbackQuery,
    button: Button,
    dialog_manager: DialogManager,
    **kwargs,
):
    await callback.answer()

    if dialog_manager.dialog_data.get("quiz_dod_certificate_sent"):
        await callback.message.answer("–ú—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–±–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å —á–∞—Ç üìÑ")
        return

    certificate_sent = await _send_quiz_certificate(callback.message, dialog_manager)
    if not certificate_sent:
        return

    dialog_manager.dialog_data["quiz_dod_certificate_sent"] = True

    db: DB | None = dialog_manager.middleware_data.get("db")
    user = callback.from_user

    if db and user:
        try:
            await db.quiz_dod_users_info.mark_certificate_requested(user.id)
        except Exception:
            logger.exception("[QUIZ_DOD] Failed to mark certificate requested for user=%s", user.id)

    await callback.message.answer("–ì–æ—Ç–æ–≤–æ! –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —É —Ç–µ–±—è üéâ")


async def on_quiz_start(
    callback: CallbackQuery,
    button: Button,
    dialog_manager: DialogManager,
    **kwargs,
):
    await callback.answer()
    _reset_quiz_progress(dialog_manager)
    dialog_manager.dialog_data["quiz_dod_last_score"] = 0
    await dialog_manager.switch_to(QuizDodSG.name)


async def on_name_entered(
    message: Message,
    widget,
    dialog_manager: DialogManager,
    value: str,
    **kwargs,
):
    
    dialog_manager.dialog_data["quiz_dod_name"] = value
    await dialog_manager.next()


async def on_phone_entered(
    message: Message,
    widget,
    dialog_manager: DialogManager,
    value: str,
    **kwargs,
):
    dialog_manager.dialog_data["quiz_dod_phone"] = value
    await dialog_manager.next()


async def on_email_entered(
    message: Message,
    widget,
    dialog_manager: DialogManager,
    value: str,
    **kwargs,
):
    dialog_manager.dialog_data["quiz_dod_email"] = value
    await dialog_manager.next()


async def on_education_entered(
    message: Message,
    widget,
    dialog_manager: DialogManager,
    value: str,
    **kwargs,
):
    dialog_manager.dialog_data["quiz_dod_education"] = value
    dialog_manager.dialog_data["quiz_dod_last_score"] = 0

    user = message.from_user
    if user:
        full_name = dialog_manager.dialog_data.get("quiz_dod_name", "")
        phone = dialog_manager.dialog_data.get("quiz_dod_phone", "")
        email = dialog_manager.dialog_data.get("quiz_dod_email", "")
        try:
            await save_user_info(
                dialog_manager,
                user.id,
                full_name=full_name,
                phone=phone,
                email=email,
                education=value,
            )
        except Exception:
            # –û—à–∏–±–∫—É —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–ª–∏ –≤–Ω—É—Ç—Ä–∏ save_user_info
            pass
    else:
        logger.warning("[QUIZ_DOD] Can't save user info: message.from_user missing")

    _reset_quiz_progress(dialog_manager)
    await dialog_manager.switch_to(
        QuizDodSG.QUESTIONS,
        show_mode=ShowMode.SEND,
    )


async def on_quiz_answer_selected(
    callback: CallbackQuery,
    widget: Select,
    dialog_manager: DialogManager,
    item_id: str,
    **kwargs,
):
    await callback.answer()

    dialog_data = dialog_manager.dialog_data
    question_index = dialog_data.get("quiz_dod_question_index", 0)
    selected_option = int(item_id)

    if question_index < len(QUESTIONS):
        question = QUESTIONS[question_index]
        correct_answer = question.options[question.correct]
        is_correct = selected_option == question.correct

        if is_correct:
            dialog_data["quiz_dod_correct_answers"] = dialog_data.get("quiz_dod_correct_answers", 0) + 1
            feedback_text = "‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!</b>"
        else:
            feedback_text = f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>..\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

        await callback.message.answer(feedback_text)

    dialog_data["quiz_dod_question_index"] = question_index + 1

    if dialog_data["quiz_dod_question_index"] >= len(QUESTIONS):
        score = dialog_data.get("quiz_dod_correct_answers", 0)
        dialog_data["quiz_dod_last_score"] = score

        previous_best = dialog_data.get("quiz_dod_score")
        if previous_best is None or score > previous_best:
            dialog_data["quiz_dod_score"] = score
            dialog_data["quiz_dod_best_updated"] = True
        else:
            dialog_data["quiz_dod_best_updated"] = False

        if dialog_data["quiz_dod_best_updated"]:
            await save_quiz_result(dialog_manager, callback.from_user.id, score)

        await callback.message.answer("""–ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º —Ç–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚ù§Ô∏è 

–í –∑–Ω–∞–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è —Ç–µ–±—è –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–¥–∞—Ä–æ–∫ ‚Äì —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å –Ω–∞—à–∏–º –º–∞—Å–∫–æ—Ç–æ–º 

–ù–∏–∂–µ ‚Äì –æ–¥–∏–Ω –∏–∑ —Å—Ç–∏–∫–µ—Ä–æ–≤. –°–æ—Ö—Ä–∞–Ω—è–π —Å–∫–æ—Ä–µ–π –∏ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –≤ —á–∞—Ç–∞—Ö –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö ‚Äì –ø—É—Å—Ç—å –≤—Å–µ –∑–Ω–∞—é—Ç, —á—Ç–æ —Ç—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ö–ë–ö üí™üèª""")

        await asyncio.sleep(5)

        await callback.message.answer_sticker('CAACAgIAAxkBAAETmC9pBlc9BAjTquUvcGJ0a04ZH4g6dAACwGoAAkEIMElCkBSwcWM0rDYE')

        await asyncio.sleep(2)

        await dialog_manager.switch_to(
            QuizDodSG.RESULTS,
            show_mode=ShowMode.DELETE_AND_SEND,
        )
        return

    await dialog_manager.switch_to(
        QuizDodSG.QUESTIONS,
        show_mode=ShowMode.DELETE_AND_SEND,
    )


async def on_quiz_restart(
    callback: CallbackQuery,
    button: Button,
    dialog_manager: DialogManager,
    **kwargs,
):
    await callback.answer()
    _reset_quiz_progress(dialog_manager)
    dialog_manager.dialog_data["quiz_dod_last_score"] = 0
    await dialog_manager.switch_to(
        QuizDodSG.QUESTIONS,
        show_mode=ShowMode.DELETE_AND_SEND,
    )