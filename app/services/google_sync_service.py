"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ —Å Google Sheets
"""
import logging
from typing import List, Dict, Any, Optional
import gspread
from google.oauth2.service_account import Credentials
import asyncio
from datetime import datetime

logger = logging.getLogger(__name__)


class GoogleSyncService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ —Å Google Sheets"""
    
    def __init__(self, credentials_path: str, spreadsheet_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        Args:
            credentials_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            spreadsheet_id: ID Google –¢–∞–±–ª–∏—Ü—ã
        """
        self.credentials_path = credentials_path
        self.spreadsheet_id = spreadsheet_id
        
        # –û–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞
        self.scopes = [
            'https://www.googleapis.com/auth/spreadsheets'
        ]
        
        # –ú–∞–ø–ø–∏–Ω–≥ –æ—Ç–¥–µ–ª–æ–≤ –Ω–∞ –ª–∏—Å—Ç—ã –≤ Google Sheets
        self.department_sheets = {
            '–û—Ç–¥–µ–ª –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∏ –ò–¢': 'Logistics',
            '–í—ã—Å—Ç–∞–≤–æ—á–Ω—ã–π –æ—Ç–¥–µ–ª': 'Exhibition', 
            '–û—Ç–¥–µ–ª SMM&PR': 'SMMPR',
            '–û—Ç–¥–µ–ª –¥–∏–∑–∞–π–Ω–∞': 'Design',
            '–û—Ç–¥–µ–ª –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤': 'Partners',
            '–û—Ç–¥–µ–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã': 'Program',
            '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª': 'Art'
        }
        
        self._setup_service()
    
    def _setup_service(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API"""
        try:
            credentials = Credentials.from_service_account_file(
                self.credentials_path, 
                scopes=self.scopes
            )
            
            self.gc = gspread.authorize(credentials)
            logger.info("‚úÖ Google Sheets API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets API: {e}")
            raise
    
    async def get_approved_applications_data(self, db_pool) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            db_pool: –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö applications
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        """
        try:
            async with db_pool.connection() as conn:
                # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
                query = """
                SELECT 
                    u.user_id,
                    a.telegram_username,
                    a.full_name,
                    a.department_1,
                    a.position_1,
                    a.subdepartment_1,
                    a.department_2,
                    a.position_2,
                    a.subdepartment_2,
                    a.department_3,
                    a.position_3,
                    a.subdepartment_3,
                    u.task_1_submitted,
                    u.task_2_submitted,
                    u.task_3_submitted,
                    ea.accepted_1,
                    ea.accepted_2,
                    ea.accepted_3
                FROM users u
                JOIN applications a ON u.user_id = a.user_id
                JOIN evaluated_applications ea ON u.user_id = ea.user_id
                WHERE (ea.accepted_1 = true OR ea.accepted_2 = true OR ea.accepted_3 = true)
                AND u.submission_status = 'submitted'
                ORDER BY u.user_id;
                """
                
                async with conn.cursor() as cursor:
                    await cursor.execute(query)
                    rows = await cursor.fetchall()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
                    column_names = [desc.name for desc in cursor.description]
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                    result_rows = []
                    for row in rows:
                        result_rows.append(dict(zip(column_names, row)))
                
                applications_data = []
                for row in result_rows:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
                    user_data = {
                        'user_id': row['user_id'],
                        'username': row['telegram_username'] or '',
                        'full_name': row['full_name'] or '',
                        'task_1_submitted': row['task_1_submitted'],
                        'task_2_submitted': row['task_2_submitted'],
                        'task_3_submitted': row['task_3_submitted'],
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–π –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    if row['accepted_1'] and row['department_1']:
                        applications_data.append({
                            **user_data,
                            'department': row['department_1'],
                            'position': row['position_1'] or '',
                            'subdepartment': row['subdepartment_1'] or '',
                            'task_submitted': row['task_1_submitted'],
                            'priority': 1
                        })
                    
                    if row['accepted_2'] and row['department_2']:
                        applications_data.append({
                            **user_data,
                            'department': row['department_2'],
                            'position': row['position_2'] or '',
                            'subdepartment': row['subdepartment_2'] or '',
                            'task_submitted': row['task_2_submitted'],
                            'priority': 2
                        })
                    
                    if row['accepted_3'] and row['department_3']:
                        applications_data.append({
                            **user_data,
                            'department': row['department_3'],
                            'position': row['position_3'] or '',
                            'subdepartment': row['subdepartment_3'] or '',
                            'task_submitted': row['task_3_submitted'],
                            'priority': 3
                        })
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(applications_data)} –∑–∞–ø–∏—Å–µ–π –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
                return applications_data
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {e}")
            return []
    
    def _get_department_display_name(self, department_key: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –æ—Ç–¥–µ–ª–∞"""
        department_names = {
            'logistics_it': '–û—Ç–¥–µ–ª –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∏ –ò–¢',
            'exhibition': '–í—ã—Å—Ç–∞–≤–æ—á–Ω—ã–π –æ—Ç–¥–µ–ª',
            'smm_pr': '–û—Ç–¥–µ–ª SMM&PR',
            'design': '–û—Ç–¥–µ–ª –¥–∏–∑–∞–π–Ω–∞',
            'partners': '–û—Ç–¥–µ–ª –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤',
            'program': '–û—Ç–¥–µ–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã',
            'creative': '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª'
        }
        return department_names.get(department_key, department_key)
    
    def _get_subdepartment_display_name(self, subdept_key: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–¥-–æ—Ç–¥–µ–ª–∞"""
        subdept_names = {
            'stage': '–°—Ü–µ–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            'booth': '–°—Ç–µ–Ω–¥–æ–≤–∞—è —Å–µ—Å—Å–∏—è',
            'social': '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∫–∏—Ç–∞–π—Å–∫–æ–º',
            'media': '–ú–µ–¥–∏–∞-—à–æ—É'
        }
        return subdept_names.get(subdept_key, subdept_key)
    
    async def sync_to_google_sheets(self, applications_data: List[Dict[str, Any]]) -> Dict[str, int]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ —Å Google Sheets
        
        Args:
            applications_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
            
        Returns:
            Dict[str, int]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º
        """
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = self.gc.open_by_key(self.spreadsheet_id)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–¥–µ–ª–∞–º
            department_data = {}
            for app in applications_data:
                dept_key = app['department']
                if dept_key not in department_data:
                    department_data[dept_key] = []
                department_data[dept_key].append(app)
            
            sync_stats = {}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –æ—Ç–¥–µ–ª
            for dept_key, apps in department_data.items():
                sheet_name = self.department_sheets.get(dept_key, dept_key)
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç
                    try:
                        worksheet = spreadsheet.worksheet(sheet_name)
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ª–∏—Å—Ç: {sheet_name}")
                    except gspread.WorksheetNotFound:
                        logger.info(f"üìÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç: {sheet_name}")
                        worksheet = spreadsheet.add_worksheet(title=sheet_name, rows=1000, cols=8)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        headers = ['ID', 'Username', '–§–ò–û', '–ü–æ–¥–æ—Ç–¥–µ–ª', '–í–∞–∫–∞–Ω—Å–∏—è', '–¢–ó —Å–¥–∞–Ω–æ', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–û—Ü–µ–Ω–∫–∞']
                        worksheet.append_row(headers)
                        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–∏—Å—Ç–∞ {sheet_name}")
                    
                    # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    if worksheet.row_count > 1:
                        worksheet.delete_rows(2, worksheet.row_count)
                        logger.info(f"üßπ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç–µ {sheet_name}")
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                    rows_to_insert = []
                    for app in apps:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–æ—Ç–¥–µ–ª–∞
                        subdept_display = ""
                        if app['subdepartment']:
                            subdept_display = self._get_subdepartment_display_name(app['subdepartment'])
                        
                        row = [
                            str(app['user_id']),  # ID
                            app['username'],       # Username
                            app['full_name'],      # –§–ò–û
                            subdept_display,       # –ü–æ–¥–æ—Ç–¥–µ–ª
                            app['position'],       # –í–∞–∫–∞–Ω—Å–∏—è
                            'True' if app['task_submitted'] else 'False',  # –¢–ó —Å–¥–∞–Ω–æ
                            '',  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø—É—Å—Ç–æ–π)
                            ''   # –û—Ü–µ–Ω–∫–∞ (–ø—É—Å—Ç–∞—è)
                        ]
                        rows_to_insert.append(row)
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                    if rows_to_insert:
                        worksheet.append_rows(rows_to_insert)
                        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(rows_to_insert)} –∑–∞–ø–∏—Å–µ–π –≤ –ª–∏—Å—Ç {sheet_name}")
                    
                    sync_stats[sheet_name] = len(rows_to_insert)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—Å—Ç–∞ {sheet_name}: {e}")
                    sync_stats[sheet_name] = 0
            
            logger.info(f"üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {sync_stats}")
            return sync_stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets: {e}")
            import traceback
            traceback.print_exc()
            return {}
    
    async def sync_approved_applications(self, db_pool) -> Dict[str, int]:
        """
        –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        
        Args:
            db_pool: –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            Dict[str, int]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        try:
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ —Å Google Sheets")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
            applications_data = await self.get_approved_applications_data(db_pool)
            
            if not applications_data:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                return {}
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets
            sync_stats = await self.sync_to_google_sheets(applications_data)
            
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {sync_stats}")
            return sync_stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return {}


async def setup_google_sync_service(credentials_path: str, spreadsheet_id: str) -> Optional[GoogleSyncService]:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Google Sheets
    
    Args:
        credentials_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        spreadsheet_id: ID Google –¢–∞–±–ª–∏—Ü—ã
        
    Returns:
        GoogleSyncService –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        return GoogleSyncService(credentials_path, spreadsheet_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return None