"""
–°–∏—Å—Ç–µ–º–∞ –∞—É–¥–∏—Ç–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
"""
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Optional

from app.utils.telegram import get_user_id_from_event, get_username_from_event

logger = logging.getLogger("rbac.audit")


class RBACAuthAuditor:
    """
    –°–∏—Å—Ç–µ–º–∞ –∞—É–¥–∏—Ç–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–∞
    - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ñ–ª—É–¥–∞ (rate limiting)
    - –ê–ª–µ—Ä—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
    """

    def __init__(self, redis=None, alert_chat_id: Optional[int] = None):
        """
        Args:
            redis: Redis –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
            alert_chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        """
        self.redis = redis
        self.alert_chat_id = alert_chat_id
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        self.forbidden_limit = 5  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ –æ–∫–Ω–æ
        self.window_seconds = 60  # –û–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.ban_threshold = 10   # –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        self.ban_duration = 300   # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (5 –º–∏–Ω—É—Ç)

    async def audit_forbidden_access(
        self, 
        event, 
        handler_name: str = "unknown", 
        reason: str = "access_denied"
    ):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        
        Args:
            event: Telegram —Å–æ–±—ã—Ç–∏–µ
            handler_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞/–∫–æ–º–∞–Ω–¥—ã
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ—Å—Ç—É–ø–µ
        """
        user_id = get_user_id_from_event(event)
        if not user_id:
            return
        
        username = get_username_from_event(event)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        logger.warning(
            "RBAC 403: user_id=%s username=%s handler=%s reason=%s",
            user_id, username or "no_username", handler_name, reason
        )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        if self.redis:
            await self._increment_attempt_counter(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–ª—É–¥
        await self._check_flood_protection(user_id, username, handler_name)

    async def _increment_attempt_counter(self, user_id: int) -> int:
        """
        –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤ –æ–∫–Ω–µ
        """
        key = f"audit:403:{user_id}"
        
        try:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            count = await self.redis.incr(key)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ
            if count == 1:
                await self.redis.expire(key, self.window_seconds)
            
            return count
        except Exception as e:
            logger.error(f"Error incrementing attempt counter: {e}")
            return 0

    async def _check_flood_protection(
        self, 
        user_id: int, 
        username: Optional[str], 
        handler_name: str
    ):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–µ—Ä—ã
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            handler_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        if not self.redis:
            return
        
        try:
            key = f"audit:403:{user_id}"
            count = await self.redis.get(key)
            
            if not count:
                return
            
            count = int(count)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if count >= self.ban_threshold:
                await self._handle_ban_threshold(user_id, username, count)
            elif count >= self.forbidden_limit:
                await self._handle_flood_alert(user_id, username, count, handler_name)
                
        except Exception as e:
            logger.error(f"Error in flood protection check: {e}")

    async def _handle_flood_alert(
        self, 
        user_id: int, 
        username: Optional[str], 
        count: int, 
        handler_name: str
    ):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            handler_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        alert_message = (
            f"‚ö†Ô∏è <b>RBAC Security Alert</b>\n\n"
            f"üë§ User: {user_id} (@{username or 'no_username'})\n"
            f"üî¢ Attempts: {count}/{self.window_seconds}s\n"
            f"üéØ Handler: {handler_name}\n"
            f"‚è∞ Time: {datetime.now().strftime('%H:%M:%S')}\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞."
        )
        
        logger.error(
            f"FLOOD ALERT: user {user_id} ({count} attempts in {self.window_seconds}s)"
        )
        
        # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –≤ –∞–¥–º–∏–Ω-—á–∞—Ç –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if self.alert_chat_id:
            # await bot.send_message(self.alert_chat_id, alert_message)
            pass

    async def _handle_ban_threshold(
        self, 
        user_id: int, 
        username: Optional[str], 
        count: int
    ):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        """
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        ban_key = f"audit:tempban:{user_id}"
        
        try:
            await self.redis.setex(ban_key, self.ban_duration, "1")
            
            ban_alert = (
                f"üö® <b>RBAC Temporary Ban</b>\n\n"
                f"üë§ User: {user_id} (@{username or 'no_username'})\n"
                f"üî¢ Attempts: {count}\n"
                f"‚è± Ban Duration: {self.ban_duration // 60} minutes\n"
                f"‚è∞ Time: {datetime.now().strftime('%H:%M:%S')}\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫."
            )
            
            logger.critical(
                f"TEMPORARY BAN: user {user_id} banned for {self.ban_duration}s "
                f"due to {count} unauthorized access attempts"
            )
            
            # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
            if self.alert_chat_id:
                # await bot.send_message(self.alert_chat_id, ban_alert)
                pass
                
        except Exception as e:
            logger.error(f"Error setting temporary ban: {e}")

    async def is_temporarily_banned(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        """
        if not self.redis:
            return False
        
        try:
            ban_key = f"audit:tempban:{user_id}"
            return bool(await self.redis.get(ban_key))
        except Exception as e:
            logger.error(f"Error checking temporary ban: {e}")
            return False

    async def get_user_attempt_stats(self, user_id: int) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        if not self.redis:
            return {"attempts": 0, "banned": False}
        
        try:
            attempt_key = f"audit:403:{user_id}"
            ban_key = f"audit:tempban:{user_id}"
            
            attempts = await self.redis.get(attempt_key)
            banned = await self.redis.get(ban_key)
            
            return {
                "attempts": int(attempts) if attempts else 0,
                "banned": bool(banned),
                "limit": self.forbidden_limit,
                "window": self.window_seconds
            }
        except Exception as e:
            logger.error(f"Error getting user stats: {e}")
            return {"attempts": 0, "banned": False}

    async def clear_user_violations(self, user_id: int):
        """
        –û—á–∏—â–∞–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not self.redis:
            return
        
        try:
            attempt_key = f"audit:403:{user_id}"
            ban_key = f"audit:tempban:{user_id}"
            
            await self.redis.delete(attempt_key, ban_key)
            
            logger.info(f"Cleared violations for user {user_id}")
        except Exception as e:
            logger.error(f"Error clearing violations: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞—É–¥–∏—Ç–æ—Ä–∞
_auditor: Optional[RBACAuthAuditor] = None


def init_auditor(redis=None, alert_chat_id: Optional[int] = None):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞—É–¥–∏—Ç–æ—Ä
    
    Args:
        redis: Redis –∫–ª–∏–µ–Ω—Ç
        alert_chat_id: ID —á–∞—Ç–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
    """
    global _auditor
    _auditor = RBACAuthAuditor(redis=redis, alert_chat_id=alert_chat_id)


def get_auditor() -> Optional[RBACAuthAuditor]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞—É–¥–∏—Ç–æ—Ä"""
    return _auditor


async def audit_forbidden(
    event, 
    handler_name: str = "unknown", 
    reason: str = "access_denied"
):
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—É–¥–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    
    Args:
        event: Telegram —Å–æ–±—ã—Ç–∏–µ
        handler_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        reason: –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞
    """
    if _auditor:
        await _auditor.audit_forbidden_access(event, handler_name, reason)