#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –≤ –ë–î –∑–∞—è–≤–æ–∫
"""
import asyncio
import logging
from config.config import load_config
from app.infrastructure.database.connect_to_pg import get_pg_pool

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='#%(levelname)-8s [%(asctime)s] - %(filename)s:%(lineno)d - %(name)s:%(funcName)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def check_priority_fields():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –≤ –ë–î –∑–∞—è–≤–æ–∫"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –∑–∞—è–≤–æ–∫
        pool = await get_pg_pool(
            db_name=config.db_applications.database,
            host=config.db_applications.host,
            port=config.db_applications.port,
            user=config.db_applications.user,
            password=config.db_applications.password
        )
        
        async with pool.connection() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö
            cursor = await conn.execute("""
                SELECT user_id, full_name, status,
                       -- –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞
                       department, position,
                       -- –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
                       department_1, position_1,
                       department_2, position_2,
                       department_3, position_3,
                       created, updated
                FROM applications
                ORDER BY created DESC;
            """)
            
            applications = await cursor.fetchall()
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –≤ {len(applications)} –∑–∞—è–≤–∫–∞—Ö:")
            
            for i, app in enumerate(applications, 1):
                user_id, full_name, status = app[0], app[1], app[2]
                old_dept, old_pos = app[3], app[4]
                dept1, pos1, dept2, pos2, dept3, pos3 = app[5], app[6], app[7], app[8], app[9], app[10]
                created, updated = app[11], app[12]
                
                logger.info(f"\nüìã –ó–∞—è–≤–∫–∞ {i} (User ID: {user_id}, {full_name}):")
                logger.info(f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {created}")
                logger.info(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞: {updated}")
                logger.info(f"   üìä –°—Ç–∞—Ç—É—Å: {status}")
                
                # –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞
                logger.info(f"   üóÇÔ∏è –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞:")
                logger.info(f"      Department: {old_dept or 'NULL'}")
                logger.info(f"      Position: {old_pos or 'NULL'}")
                
                # –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
                logger.info(f"   üéØ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤:")
                logger.info(f"      1-–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {dept1 or 'NULL'} - {pos1 or 'NULL'}")
                logger.info(f"      2-–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {dept2 or 'NULL'} - {pos2 or 'NULL'}")
                logger.info(f"      3-–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {dept3 or 'NULL'} - {pos3 or 'NULL'}")
                
                # –ê–Ω–∞–ª–∏–∑
                has_old_data = old_dept is not None or old_pos is not None
                has_new_data = any([dept1, pos1, dept2, pos2, dept3, pos3])
                
                if has_old_data and not has_new_data:
                    logger.info(f"   ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ù–ï –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
                elif has_new_data and not has_old_data:
                    logger.info(f"   ‚úÖ –û–ö: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤")
                elif has_old_data and has_new_data:
                    logger.info(f"   üîÑ –ü–ï–†–ï–•–û–î–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï: –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö")
                else:
                    logger.info(f"   ‚ùå –ü–£–°–¢–û: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∏ –≤ –æ–¥–Ω–æ–π –∏–∑ —Å–∏—Å—Ç–µ–º")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—è–º
            cursor = await conn.execute("""
                SELECT 
                    COUNT(*) as total,
                    COUNT(department) as has_old_dept,
                    COUNT(position) as has_old_pos,
                    COUNT(department_1) as has_dept_1,
                    COUNT(position_1) as has_pos_1,
                    COUNT(department_2) as has_dept_2,
                    COUNT(position_2) as has_pos_2,
                    COUNT(department_3) as has_dept_3,
                    COUNT(position_3) as has_pos_3
                FROM applications;
            """)
            
            stats = await cursor.fetchone()
            total = stats[0]
            
            logger.info(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–û–õ–Ø–ú:")
            logger.info(f"   üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}")
            logger.info(f"   üóÇÔ∏è –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞:")
            logger.info(f"      - department: {stats[1]}/{total}")
            logger.info(f"      - position: {stats[2]}/{total}")
            logger.info(f"   üéØ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤:")
            logger.info(f"      - department_1: {stats[3]}/{total}")
            logger.info(f"      - position_1: {stats[4]}/{total}")
            logger.info(f"      - department_2: {stats[5]}/{total}")
            logger.info(f"      - position_2: {stats[6]}/{total}")
            logger.info(f"      - department_3: {stats[7]}/{total}")
            logger.info(f"      - position_3: {stats[8]}/{total}")
            
            if stats[3] == 0 and stats[4] == 0:
                logger.error(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:")
                logger.error(f"   –ù–∏ –æ–¥–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤!")
                logger.error(f"   –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏.")
            elif stats[1] > 0 and stats[3] > 0:
                logger.info(f"\nüîÑ –°–û–°–¢–û–Ø–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ò:")
                logger.info(f"   –°–∏—Å—Ç–µ–º–∞ –≤ –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ - –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö")
            else:
                logger.info(f"\n‚úÖ –°–ò–°–¢–ï–ú–ê –û–ë–ù–û–í–õ–ï–ù–ê:")
                logger.info(f"   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î –∑–∞—è–≤–æ–∫: {e}")

if __name__ == "__main__":
    asyncio.run(check_priority_fields())
