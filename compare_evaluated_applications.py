#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ evaluated_applications —Å CSV —Ñ–∞–π–ª–æ–º
–∏ –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import psycopg
import csv
import logging
import sys
import os
from config.config import load_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='#%(levelname)-8s [%(asctime)s] - %(filename)s:%(lineno)d - %(name)s:%(funcName)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def compare_evaluated_applications(csv_file_path: str):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ evaluated_applications —Å CSV —Ñ–∞–π–ª–æ–º
    –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        csv_file_path: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    config = load_config()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(csv_file_path):
        logger.error(f"CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_file_path}")
        return False
    
    # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    try:
        logger.info(f"–ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞: {csv_file_path}")
        
        # –ß–∏—Ç–∞–µ–º CSV –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
        csv_user_ids = set()
        csv_data = {}
        duplicate_ids = []
        
        with open(csv_file_path, 'r', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            for row_num, row in enumerate(reader, 1):
                try:
                    user_id = int(row['user_id'])
                    
                    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è ID
                    if user_id in csv_user_ids:
                        duplicate_ids.append((user_id, row_num))
                        logger.warning(f"–î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è user_id {user_id} –≤ —Å—Ç—Ä–æ–∫–µ {row_num}")
                    
                    csv_user_ids.add(user_id)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if user_id not in csv_data:
                        csv_data[user_id] = {
                            'username': row.get('username', ''),
                            'full_name': row.get('full_name', ''),
                            'accepted_1': row.get('accepted_1', ''),
                            'accepted_2': row.get('accepted_2', ''),
                            'accepted_3': row.get('accepted_3', ''),
                            'row_num': row_num
                        }
                except ValueError:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id –≤ —Å—Ç—Ä–æ–∫–µ {row_num}: {row}")
                    continue
            
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(csv_user_ids)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ CSV")
        if duplicate_ids:
            logger.warning(f"–ù–∞–π–¥–µ–Ω–æ {len(duplicate_ids)} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π: {duplicate_ids}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞: {e}")
        return False
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    connection_string = f"postgresql://{config.db_applications.user}:{config.db_applications.password}@{config.db_applications.host}:{config.db_applications.port}/{config.db_applications.database}"
    
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
    async with await psycopg.AsyncConnection.connect(connection_string) as conn:
        async with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ user_id –∏–∑ evaluated_applications
            await cur.execute("SELECT user_id FROM evaluated_applications")
            db_user_ids = set(row[0] for row in await cur.fetchall())
            logger.info(f"–í —Ç–∞–±–ª–∏—Ü–µ evaluated_applications –Ω–∞–π–¥–µ–Ω–æ {len(db_user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            await cur.execute("SELECT user_id FROM users")
            users_table_ids = set(row[0] for row in await cur.fetchall())
            logger.info(f"–í —Ç–∞–±–ª–∏—Ü–µ users –Ω–∞–π–¥–µ–Ω–æ {len(users_table_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ CSV, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ evaluated_applications
            missing_in_evaluated = csv_user_ids - db_user_ids
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ CSV, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users
            missing_in_users = csv_user_ids - users_table_ids
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ users, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ evaluated_applications
            missing_but_in_users = missing_in_evaluated - missing_in_users
            
            print("\n" + "="*80)
            print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø")
            print("="*80)
            
            print(f"\n–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV —Ñ–∞–π–ª–µ: {len(csv_user_ids)}")
            print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ evaluated_applications: {len(db_user_ids)}")
            print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ users: {len(users_table_ids)}")
            
            print(f"\n–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ evaluated_applications (–≤—Å–µ–≥–æ): {len(missing_in_evaluated)}")
            print(f"–ò–∑ –Ω–∏—Ö:")
            print(f"  - –ï—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ users: {len(missing_but_in_users)}")
            print(f"  - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users: {len(missing_in_users)}")
            
            if missing_in_users:
                print(f"\n‚ö†Ô∏è  –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò, –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –í –¢–ê–ë–õ–ò–¶–ï USERS:")
                print("-" * 60)
                for user_id in sorted(missing_in_users):
                    user_data = csv_data[user_id]
                    print(f"  {user_id:>12} | {user_data['username']:<20} | {user_data['full_name']}")
            
            if missing_but_in_users:
                print(f"\n‚úÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í EVALUATED_APPLICATIONS:")
                print("-" * 70)
                print(f"{'User ID':>12} | {'Username':^20} | {'Full Name':^30} | {'Results'}")
                print("-" * 70)
                
                for user_id in sorted(missing_but_in_users):
                    user_data = csv_data[user_id]
                    results = f"{user_data['accepted_1']}/{user_data['accepted_2']}/{user_data['accepted_3']}"
                    print(f"  {user_id:>12} | {user_data['username']:^20} | {user_data['full_name']:<30} | {results}")
            
            if not missing_in_evaluated:
                print(f"\n‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ CSV —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ evaluated_applications")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ evaluated_applications, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ CSV
            extra_in_db = db_user_ids - csv_user_ids
            if extra_in_db:
                print(f"\nüìã –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –í EVALUATED_APPLICATIONS, –ù–û –ù–ï –í CSV ({len(extra_in_db)}):")
                print("-" * 40)
                for user_id in sorted(extra_in_db):
                    print(f"  {user_id}")
            
            print("\n" + "="*80)
            
            return {
                'csv_total': len(csv_user_ids),
                'db_total': len(db_user_ids),
                'missing_in_evaluated': list(missing_in_evaluated),
                'missing_in_users': list(missing_in_users),
                'can_add_to_evaluated': list(missing_but_in_users),
                'extra_in_db': list(extra_in_db)
            }


async def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python compare_evaluated_applications.py <–ø—É—Ç—å_–∫_csv_—Ñ–∞–π–ª—É>")
        print("–ü—Ä–∏–º–µ—Ä: python compare_evaluated_applications.py '–ó–∞—è–≤–∫–∏ –ö–ë–ö26 - –û—Ü–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ (2).csv'")
        sys.exit(1)
    
    csv_file_path = sys.argv[1]
    result = await compare_evaluated_applications(csv_file_path)
    
    if result:
        logger.info("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        sys.exit(0)
    else:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())